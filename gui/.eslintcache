[{"/home/honza/dp/gui/src/index.js":"1","/home/honza/dp/gui/src/reportWebVitals.js":"2","/home/honza/dp/gui/src/App.js":"3","/home/honza/dp/gui/src/CursorControl.js":"4","/home/honza/dp/gui/src/HorizontalControl.js":"5","/home/honza/dp/gui/src/ChannelControl.js":"6","/home/honza/dp/gui/src/TriggerControl.js":"7","/home/honza/dp/gui/src/CursorMeasurementBox.js":"8","/home/honza/dp/gui/src/CanvasPlot.js":"9","/home/honza/dp/gui/src/SplashScreen.js":"10","/home/honza/dp/gui/src/Capture.js":"11","/home/honza/dp/gui/src/CaptureDepthAndSampleRateConfig.js":"12","/home/honza/dp/gui/src/SideMenu.js":"13","/home/honza/dp/gui/src/MultiRangeSlider.js":"14","/home/honza/dp/gui/src/CaptureSave.js":"15","/home/honza/dp/gui/src/SettingControl.js":"16","/home/honza/dp/gui/src/ValueBox.js":"17","/home/honza/dp/gui/src/Utils.js":"18"},{"size":493,"mtime":1666704676061,"results":"19","hashOfConfig":"20"},{"size":362,"mtime":1666704676061,"results":"21","hashOfConfig":"20"},{"size":5738,"mtime":1669843344124,"results":"22","hashOfConfig":"20"},{"size":1421,"mtime":1669042983412,"results":"23","hashOfConfig":"20"},{"size":1743,"mtime":1669841273202,"results":"24","hashOfConfig":"20"},{"size":2629,"mtime":1669841273202,"results":"25","hashOfConfig":"20"},{"size":2974,"mtime":1669841273202,"results":"26","hashOfConfig":"20"},{"size":1596,"mtime":1669841143572,"results":"27","hashOfConfig":"20"},{"size":6708,"mtime":1669841273202,"results":"28","hashOfConfig":"20"},{"size":139,"mtime":1669847161632,"results":"29","hashOfConfig":"20"},{"size":6547,"mtime":1669841273202,"results":"30","hashOfConfig":"20"},{"size":1603,"mtime":1669841715236,"results":"31","hashOfConfig":"20"},{"size":888,"mtime":1669841273202,"results":"32","hashOfConfig":"20"},{"size":2986,"mtime":1669841273202,"results":"33","hashOfConfig":"20"},{"size":1017,"mtime":1669841273202,"results":"34","hashOfConfig":"20"},{"size":756,"mtime":1667470263191,"results":"35","hashOfConfig":"20"},{"size":753,"mtime":1667585664723,"results":"36","hashOfConfig":"20"},{"size":823,"mtime":1669841273202,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1eo8ix7",{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"40"},"/home/honza/dp/gui/src/index.js",[],["84","85"],"/home/honza/dp/gui/src/reportWebVitals.js",[],"/home/honza/dp/gui/src/App.js",["86","87"],"import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport ChannelControl from './ChannelControl';\nimport HorizontalControl from './HorizontalControl';\nimport CanvasPlot from './CanvasPlot';\nimport CursorControl from './CursorControl';\nimport TriggerControl from './TriggerControl';\nimport CursorMeasurementBox from './CursorMeasurementBox';\nimport CaptureDepthAndSampleRateConfig from './CaptureDepthAndSampleRateConfig';\nimport Capture from './Capture';\nimport MultiRangeSlider from './MultiRangeSlider';\nimport SideMenu from './SideMenu';\nimport SplashScreen from './SplashScreen';\n\n\nlet defaultCaptureConfig = {\n  activeChannels: [true, false, false],\n  channelColors: ['#d4c84e', '#E78787', '#68e05d'],\n  trigger: {\n    channels: [true, false, false], \n    threshold: 77, // 1 V\n    edge: \"UP\"\n  },\n  preTrigger: 0.1,\n  sampleRate: 500000,\n  captureDepth: 10000,\n  captureMode: \"Auto\"\n};\n\nlet defaultCaptureData = [[], [], []];\n\n\nlet defaultViewConfig = {\n  visibleChannels: [true, true, false],\n  vertical: [\n    {offset: 0, zoom: 1}, \n    {offset: 0, zoom: 1},\n    {offset: 0, zoom: 1}\n  ],\n  horizontal: {\n    zoom: 1,\n    offset: 0,\n    viewCenter: defaultCaptureConfig.captureDepth / 2\n  },\n  grid: true\n}\n\nlet defaultCursorConfig = {\n    visible: false,\n    start: 0,\n    end: defaultCaptureConfig.captureDepth,\n    channel: 0\n}\n\n\nlet defaultCaptureState = \"Stopped\";\n\nlet defaultAppState = {\n  menu: false\n}\n\n\nexport default function App() {\n  let [captureConfig, setCaptureConfig] = useState(defaultCaptureConfig);\n  let [savedCaptureConfig, setSavedCaptureConfig] = useState(defaultCaptureConfig);\n  let [viewConfig, setViewConfig] = useState(defaultViewConfig);\n  let [captureData, setCaptureData] = useState(defaultCaptureData);\n  let [cursorConfig, setCursorConfig] = useState(defaultCursorConfig);\n  let [USBDevice, setUSBDevice] = useState(null);\n  let [captureState, setCaptureState] = useState(defaultCaptureState);\n  let [appState, setAppState] = useState(defaultAppState);\n\n\n  async function connectDevice() {\n    let device = await navigator.usb.requestDevice({ filters: [{ vendorId: 0xcafe }] });\n    await device.open();\n    await device.selectConfiguration(1);\n    await device.claimInterface(2);\n    setUSBDevice(device);\n\n    navigator.usb.addEventListener('disconnect', event => {\n      setUSBDevice(null);\n      setCaptureState(\"Stopped\");\n    });\n\n    // \"Dummy\" IN transfer\n    let result = await device.transferIn(3, 4);\n\n    // Out transfer - abort capture\n    let abortMessage = new Uint8Array([0]);\n    device.transferOut(3, abortMessage);\n\n  }\n\n  return (\n    <div className='root'>\n      {cursorConfig.visible && <CursorMeasurementBox captureConfig={captureConfig} captureData={captureData} cursorConfig={cursorConfig}/>}\n      <SplashScreen/>\n    <div className=\"app\">\n      <div className=\"topbar\">\n        <div className='leftMenu'>\n        <button onClick={connectDevice}\n        style={USBDevice != null ? {backgroundColor: \"#0076fa\", color: 'lightgray', boxShadow: \"0px 0px 5px #0076fa\"} : {}}>\n          {USBDevice == null ? \"Connect device\" : \"Connected\"}\n          </button>\n       \n        <Capture \n          captureConfig={captureConfig} \n          setCaptureConfig={setCaptureConfig}\n          setSavedCaptureConfig={setSavedCaptureConfig}\n          captureState={captureState} \n          setCaptureState={setCaptureState}  \n          USBDevice={USBDevice} \n          setCaptureData={setCaptureData}\n          />\n        \n        <CaptureDepthAndSampleRateConfig \n          captureConfig={captureConfig} \n          setCaptureConfig={setCaptureConfig} \n          viewConfig={viewConfig} \n          setViewConfig={setViewConfig}\n          setCaptureData={setCaptureData}\n          defaultCaptureData={defaultCaptureData}\n        />\n        \n        <button onClick={() => setViewConfig({...viewConfig, grid: !viewConfig.grid})}>Toggle grid</button>\n        </div>\n        <div className='rightMenu'>\n        <button onClick={() => setAppState({...appState, menu : !appState.menu})}>{appState.menu ? \"> > >\" : \"< < <\"}</button>\n\n        </div>\n\n      </div>\n      <div className=\"main\">\n        <CanvasPlot \n          data={captureData} \n          viewConfig={viewConfig} \n          cursorConfig={cursorConfig} \n          savedCaptureConfig={savedCaptureConfig}\n          captureConfig={captureConfig}\n        />\n        {cursorConfig.visible && <MultiRangeSlider cursorConfig={cursorConfig} viewConfig={viewConfig} \n        captureConfig={captureConfig} setCursorConfig={setCursorConfig}/>}\n\n        <div className='side'>\n          {appState.menu ?  \n          <SideMenu captureData={captureData} captureConfig={captureConfig}/>\n          :\n          <div>\n            <ChannelControl number=\"1\" color=\"#FFF735\" captureConfig={captureConfig} setCaptureConfig={setCaptureConfig}\n            viewConfig={viewConfig} setViewConfig={setViewConfig}/>\n            <ChannelControl number=\"2\" color=\"#E78787\" captureConfig={captureConfig} setCaptureConfig={setCaptureConfig}\n            viewConfig={viewConfig} setViewConfig={setViewConfig}/>\n            <ChannelControl number=\"3\" color=\"#68E05D\" captureConfig={captureConfig} setCaptureConfig={setCaptureConfig}\n            viewConfig={viewConfig} setViewConfig={setViewConfig}/>\n            <CursorControl cursorConfig={cursorConfig} viewConfig={viewConfig} captureConfig={captureConfig} setCursorConfig={setCursorConfig}/>\n            <HorizontalControl captureConfig={captureConfig} viewConfig={viewConfig} setViewConfig={setViewConfig}/>\n            <TriggerControl captureConfig={captureConfig} setCaptureConfig={setCaptureConfig}/>\n          </div>\n          }\n        </div>\n      </div>\n      </div>\n    </div>\n  );\n}","/home/honza/dp/gui/src/CursorControl.js",["88","89","90","91","92"],"import React, {useState} from 'react';\nimport './ChannelControl.css';\n\nimport ChannelPicker from './ChannelPicker.css';\n\n\nexport default function CursorControl({cursorConfig, captureConfig, setCursorConfig}) {\n\n  function toggleActive() {\n    setCursorConfig({...cursorConfig, visible: !cursorConfig.visible});\n  }\n\n  function setCursorChannel(channel) {\n    setCursorConfig({...cursorConfig, channel: channel});\n  }\n\n  return (\n    <div className=\"ChannelControl\">\n      <div className=\"topBar\" style={{backgroundColor: \"#DB75FF\"}}>\n        <div className='name'>Cursors</div> \n        <input className=\"checkBox\"type = \"checkbox\" checked={cursorConfig.visible} onChange={toggleActive}></input>\n\n        </div>\n        <div className='content'>\n\n\n\n\n        <div className='data'>\n            <div className='name'>Channel</div>\n            </div>\n\n            <div className='ChannelPicker'>\n            <button onClick={() => setCursorChannel(0)} style={{backgroundColor: cursorConfig.channel == 0 ? captureConfig.channelColors[0] : \"\"}}>1</button>\n            <button onClick={() => setCursorChannel(1)} style={{backgroundColor: cursorConfig.channel == 1 ? captureConfig.channelColors[1] : \"\"}}>2</button>\n            <button onClick={() => setCursorChannel(2)} style={{backgroundColor: cursorConfig.channel == 2 ? captureConfig.channelColors[2] : \"\"}}>3</button>\n          </div>\n\n\n\n        </div>\n    </div>\n    )\n}\n","/home/honza/dp/gui/src/HorizontalControl.js",["93","94","95","96","97","98","99"],"import SettingControl from './SettingControl';\nimport React, {useState} from 'react';\nimport './ChannelControl.css';\n\n\nexport default function HorizontalControl({captureConfig, viewConfig, setViewConfig}) {\n\n\n  function changeZoom(dir) {\n    if (dir == '0') {\n      setViewConfig({...viewConfig, horizontal: {...viewConfig.horizontal, zoom: 1}});\n      return;\n    }\n    if (viewConfig.horizontal.zoom <= 1 && dir == '-') return;\n    let newZoom = viewConfig.horizontal.zoom;\n    let newViewCenter = viewConfig.horizontal.viewCenter;\n    if (dir == '-' ) {\n      newZoom /= 2;\n    } else {\n      newZoom *= 2;\n      newViewCenter -= newViewCenter % (captureConfig.captureDepth / 10);\n    }\n      setViewConfig({...viewConfig, horizontal: {...viewConfig.horizontal, zoom: newZoom, viewCenter: newViewCenter}});\n  }\n\n  function changeViewCenter(dir) {\n    let newVal = viewConfig.horizontal.viewCenter;\n    let increment = captureConfig.captureDepth / viewConfig.horizontal.zoom / 10;\n    if (dir == '+') newVal += increment;\n    else if (dir == '-') newVal -= increment;\n    else if (dir == '0') newVal = captureConfig.captureDepth / 2;\n    console.log(newVal);\n    setViewConfig({...viewConfig, horizontal: {...viewConfig.horizontal, viewCenter: newVal}});\n    \n    \n  }\n\n  return (\n    <div className=\"ChannelControl\">\n      <div className=\"topBar\" style={{backgroundColor: \"#ACACAC\"}}>\n        <div className='name'>Horizontal</div> \n        </div>\n        <div className='content'>\n          <SettingControl name=\"Zoom\" unit=\" x\" data={viewConfig.horizontal.zoom} callback={changeZoom}/>\n          <SettingControl name=\"Offset\" unit=\" div\" data={viewConfig.horizontal.offset} callback={changeViewCenter}/>\n        </div>\n    </div>\n    )\n}\n","/home/honza/dp/gui/src/ChannelControl.js",["100","101","102","103","104","105","106","107","108","109","110","111","112","113","114"],"import ValueBox from './ValueBox';\nimport React, {useState} from 'react';\nimport './ChannelControl.css';\nimport {getNumActiveChannels, formatValue} from './Utils'\n\nexport default function ChannelControl({color, number, captureConfig, setCaptureConfig, viewConfig, setViewConfig}) {\n\n  const channelNumber = parseInt(number);\n\n  function changeZoom(dir) {\n      let newVertical = viewConfig.vertical;\n      let oldVal = newVertical[channelNumber - 1].zoom;\n      let newVal = oldVal;\n      if (dir == '0') {\n        newVal = 1;\n      }\n      else if (dir == '+' && oldVal == 0.5) {\n        newVal = 1;\n      } else {\n        let d = String(oldVal)[0];\n        if (d == 1)\n          if (dir == '-' ) newVal /= 2;\n          else newVal *= 2;\n        else if (d == 2)\n          if (dir == '-') newVal /= 2;\n          else newVal *= 5/2;\n        else if (d == 5)\n          if (dir == '-') newVal /= 5/2;\n          else newVal *= 2;\n      }\n      newVertical[channelNumber - 1].zoom = newVal;\n      setViewConfig({...viewConfig, vertical: newVertical});\n\n  }\n\n  function changeOffset(dir) {\n    let newVertical = viewConfig.vertical;\n    let oldVal = newVertical[channelNumber - 1].offset;\n\n    if (dir == '0') {\n      newVertical[channelNumber - 1].offset = 0;\n      setViewConfig({...viewConfig, vertical: newVertical});\n      return;\n    }\n    let newVal = oldVal;\n    if (dir == '-') newVal--;\n    else if (dir == '+') newVal++;\n\n      newVertical[channelNumber - 1].offset = newVal;\n    setViewConfig({...viewConfig, vertical: newVertical});\n  }\n\n  function toggleActive() {\n    if (captureConfig.activeChannels[channelNumber - 1] && getNumActiveChannels(captureConfig) == 1) return;\n\n    let newActiveChannels = captureConfig.activeChannels;\n    newActiveChannels[channelNumber - 1] = !newActiveChannels[channelNumber - 1];\n    setCaptureConfig({...captureConfig, activeChannels: newActiveChannels});\n\n    console.log(\"active channels: \", getNumActiveChannels(captureConfig));\n  }\n\n  return (\n    <div className=\"ChannelControl\">\n      <div className=\"topBar\" style={{backgroundColor: color}}>\n        <div className='name'>Channel {number} </div>\n          <input className=\"checkBox\"type = \"checkbox\" checked={captureConfig.activeChannels[channelNumber - 1]} onChange={toggleActive}>\n          </input>\n        </div>\n        <div className='content'>\n          <ValueBox name=\"Scale\" unit=\" x\" data={viewConfig.vertical[channelNumber - 1].zoom} setData={changeZoom}/>\n          <ValueBox name=\"Offset\" unit=\" div\" data={viewConfig.vertical[channelNumber - 1].offset} setData={changeOffset}/>\n        </div>\n    </div>\n    )\n}\n","/home/honza/dp/gui/src/TriggerControl.js",["115","116","117","118","119","120","121"],"import SettingControl from './SettingControl';\nimport React, {useState} from 'react';\nimport './ChannelControl.css';\n\n\nexport default function TriggerControl({captureConfig, setCaptureConfig}) {\n\n  function triggerChange(e) {\n    setCaptureConfig({...captureConfig, trigger: {...captureConfig.trigger, threshold: e.target.value}});\n  }\n \n\n  function preTriggerChange(dir) {\n    let newVal = captureConfig.preTrigger;\n    if (dir == '+') newVal += 0.1;\n    else if (dir == '-') newVal -= 0.1;\n    else if (dir == '0') newVal = 0;\n    console.log(newVal);\n    setCaptureConfig({...captureConfig, preTrigger: Math.round(newVal * 10) / 10});\n    \n  }\n \n  function toggleTriggerChannel(channel) {\n    let newChannels = captureConfig.trigger.channels;\n    newChannels[channel] = !newChannels[channel];\n    setCaptureConfig({...captureConfig, trigger: {...captureConfig.trigger, channels: newChannels}});\n  }\n\n  function setTriggerEdge(edge) {\n    setCaptureConfig({...captureConfig, trigger: {...captureConfig.trigger, edge: edge}});\n  }\n\n  return (\n    <div className=\"ChannelControl\">\n      <div className=\"topBar\" style={{backgroundColor: \"cyan\"}}>\n        <div className='name'>Trigger</div> \n        </div>\n        <div className='content'>\n\n\n\n\n        <div className='data'>\n            <div className='name'>Channels</div>\n            </div>\n\n        <div className='buttons'>\n\n        <button onClick={() => toggleTriggerChannel(0)} style={{backgroundColor: captureConfig.trigger.channels[0] ? captureConfig.channelColors[0] : \"\"}}>1</button>\n        <button onClick={() => toggleTriggerChannel(1)} style={{backgroundColor: captureConfig.trigger.channels[1] ? captureConfig.channelColors[1] : \"\"}}>2</button>\n        <button onClick={() => toggleTriggerChannel(2)} style={{backgroundColor: captureConfig.trigger.channels[2] ? captureConfig.channelColors[2] : \"\"}}>3</button>\n</div>\n\n\n<div className='data'>\n            <div className='name'>Edge</div>\n            </div>\n\n        <div className='buttons'>\n\n        <button  onClick={() => setTriggerEdge(\"UP\")} style={{backgroundColor: captureConfig.trigger.edge == \"UP\" ? \"#ffffff\" : \"\"}}>Rise</button>\n        <button  onClick={() => setTriggerEdge(\"DOWN\")} style={{backgroundColor: captureConfig.trigger.edge == \"DOWN\" ? \"#ffffff\" : \"\"}}>Fall</button>\n        <button  onClick={() => setTriggerEdge(\"BOTH\")} style={{backgroundColor: captureConfig.trigger.edge == \"BOTH\" ? \"#ffffff\" : \"\"}}>Both</button>\n\n\n</div>\n\n<div className='data'>\n            <div className='name'>Level</div>\n            </div>\n\n<input type=\"range\" min=\"1\" max=\"254\" value={captureConfig.trigger.threshold} onChange={triggerChange} style={{width: \"100%\", margin: \"0px\", padding: \"0px\"}}/>\n\n\n<div className='data'>\n            </div>\n\n<div className='content'>\n          <SettingControl name=\"Pretrigger\" unit=\"\" data={Math.round(captureConfig.preTrigger * 10) / 10} callback={preTriggerChange}/>\n        </div>\n\n        </div>\n    </div>\n    )\n}\n","/home/honza/dp/gui/src/CursorMeasurementBox.js",[],"/home/honza/dp/gui/src/CanvasPlot.js",["122","123"],"import React, { useRef, useEffect } from 'react'\nimport {getNumActiveChannels, formatValue} from './Utils';\n\n\nconst CanvasPlot =({data, viewConfig, captureConfig, savedCaptureConfig, cursorConfig}) => {\n  \n  const canvasRef = useRef(null)\n  const draw = (ctx, canvas, frameCount) => {\n    if (canvasRef.current) {\n    canvas.width = canvasRef.current.clientWidth;\n    canvas.height = canvasRef.current.clientHeight;\n    }\n\n    // Fill whole canvas with background color\n    ctx.fillStyle = \"#272727\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    \n\n    // Draw trigger level\n    ctx.setLineDash([5, 10]);\n    ctx.beginPath();\n    ctx.moveTo(0, uint8ToYPos(captureConfig.trigger.threshold, viewConfig.vertical[0].zoom, viewConfig.vertical[0].offset));\n    ctx.lineTo(canvas.width, uint8ToYPos(captureConfig.trigger.threshold, viewConfig.vertical[0].zoom, viewConfig.vertical[0].offset));\n    ctx.strokeStyle = 'cyan';\n    ctx.stroke();\n\n    ctx.setLineDash([5, 10]);\n    ctx.beginPath();\n    ctx.moveTo(getCursorPos(captureConfig.preTrigger * savedCaptureConfig.captureDepth), 0);\n    ctx.lineTo(getCursorPos(captureConfig.preTrigger * savedCaptureConfig.captureDepth), canvas.height);\n    ctx.strokeStyle = 'cyan';\n    ctx.stroke();\n\n    // Draw vertical cursor 1\n    function getCursorPos(pos) {\n      let zoomStart = viewConfig.horizontal.viewCenter - savedCaptureConfig.captureDepth / viewConfig.horizontal.zoom / 2;\n      let zoomEnd = viewConfig.horizontal.viewCenter + savedCaptureConfig.captureDepth / viewConfig.horizontal.zoom / 2;\n      return canvas.width * (pos - zoomStart) / (zoomEnd - zoomStart);\n    }\n\n    if (cursorConfig.visible) {\n    ctx.lineWidth = 2;\n    ctx.setLineDash([5, 10]);\n    ctx.beginPath();\n    ctx.moveTo(getCursorPos(cursorConfig.start), 0);\n    ctx.lineTo(getCursorPos(cursorConfig.start), canvas.height);\n    ctx.strokeStyle = 'magenta';\n    ctx.stroke();\n    \n\n    ctx.lineWidth = 2;\n    ctx.setLineDash([5, 10]);\n    ctx.beginPath();\n    ctx.moveTo(getCursorPos(cursorConfig.end), 0);\n    ctx.lineTo(getCursorPos(cursorConfig.end), canvas.height);\n    ctx.strokeStyle = 'magenta';\n    ctx.stroke();\n\n\n    }\n    ctx.setLineDash([]);\n\n\n\n    // Draw grid\n    if (viewConfig.grid) {\n    ctx.lineWidth = 0.3;\n    for (let i = 1; i < 10; i++) {\n        ctx.beginPath();\n        ctx.moveTo(canvas.width / 10 * i, 0);\n        ctx.lineTo(canvas.width / 10 * i, canvas.height);\n        ctx.strokeStyle = 'white';\n        ctx.stroke();\n\n        ctx.font = \"15px Arial\";\n        ctx.fillStyle = \"gray\";\n\n        let zoomStart = viewConfig.horizontal.viewCenter - savedCaptureConfig.captureDepth / viewConfig.horizontal.zoom / 2;\n        \n\n        let divMs = 100 * savedCaptureConfig.captureDepth / savedCaptureConfig.sampleRate * getNumActiveChannels(savedCaptureConfig) / viewConfig.horizontal.zoom;\n        let zoomStartMs = 1000 * (zoomStart - savedCaptureConfig.captureDepth * savedCaptureConfig.preTrigger) / savedCaptureConfig.sampleRate * getNumActiveChannels(savedCaptureConfig);\n        \n        let time = zoomStartMs + i * divMs;\n        time = Math.round(time * 100) / 100;\n        \n        ctx.fillText(String(time) + \" ms\", canvas.width / 10 * i + 5, 15);\n      }\n\n    for (let i = 0.5; i < 3.3; i += 0.5) {\n        ctx.beginPath();\n        ctx.moveTo(0, canvas.height / 3.3 * (3.3 - i));\n        ctx.lineTo(canvas.width, canvas.height / 3.3 * (3.3 - i));\n        ctx.strokeStyle = 'white';\n        ctx.stroke();\n\n        ctx.font = \"15px Arial\";\n        ctx.fillStyle = \"gray\";\n        let str = Math.round(i * 10) / 10;\n        ctx.fillText(String(str + \" V\"), 5, canvas.height / 3.3 * (3.3 - i) - 5);\n    }\n  }\n\n\n    function uint8ToYPos(val, zoom, offset) {\n      return ((255 - val * zoom) * canvas.height / 255) - 0  * (0.5 / 3.3 * 255) - offset * 3.5 / 3.3 * canvas.height / 7 ;\n    }\n\n    // Calculate zoom\n    let zoomStart = viewConfig.horizontal.viewCenter - savedCaptureConfig.captureDepth / viewConfig.horizontal.zoom / 2;\n    let zoomEnd = viewConfig.horizontal.viewCenter + savedCaptureConfig.captureDepth / viewConfig.horizontal.zoom / 2;\n\n\n   // Draw channels\n    ctx.lineWidth = 2.5;\n    for (let channelIndex = 0; channelIndex < savedCaptureConfig.activeChannels.length; channelIndex++) {\n      if (!savedCaptureConfig.activeChannels[channelIndex]) continue;\n\n      ctx.beginPath();\n      // Zoomed out\n      if (zoomEnd - zoomStart >= canvas.width) {\n      for (let i = 1; i < canvas.width; i++) { \n        let bufferPos = Math.round(zoomStart + i * (zoomEnd - zoomStart) / canvas.width);\n        ctx.lineTo(i, uint8ToYPos(data[channelIndex][bufferPos], viewConfig.vertical[channelIndex].zoom, viewConfig.vertical[channelIndex].offset));\n      }\n      } else {\n      // Zoomed in - draw individual lines between sample points\n        zoomStart -= zoomStart % 1;\n        zoomEnd -= zoomEnd % 1;\n        for (let i = 0; i <= zoomEnd - zoomStart; i++) {\n          let xPos = i * canvas.width / (zoomEnd - zoomStart);\n          let captureIndex = i + zoomStart;\n          let captureVal = data[channelIndex][captureIndex];          \n\n          ctx.lineTo(xPos, uint8ToYPos(captureVal, viewConfig.vertical[channelIndex].zoom, viewConfig.vertical[channelIndex].offset));\n        }\n      }\n      ctx.strokeStyle = savedCaptureConfig.channelColors[channelIndex];\n      ctx.stroke();\n\n      // Draw circles at sample points when zoomed in \n      if (zoomEnd - zoomStart < 50) {\n      zoomStart -= zoomStart % 1;\n      zoomEnd -= zoomEnd % 1;\n      for (let i = 0; i < zoomEnd - zoomStart; i++) {\n        let xPos = i * canvas.width / (zoomEnd - zoomStart);\n        let captureIndex = i + zoomStart;\n        let captureVal = data[channelIndex][captureIndex];     \n        \n        ctx.beginPath();\n        ctx.arc(xPos, uint8ToYPos(captureVal, viewConfig.vertical[channelIndex].zoom, viewConfig.vertical[channelIndex].offset),\n         3, 0, 2 * Math.PI);\n        ctx.stroke(); \n        ctx.fillStyle = savedCaptureConfig.channelColors[channelIndex];\n        ctx.fill();\n\n      }\n    }\n    }\n\n\n  };\n\n  useEffect(() => {\n    let canvas = canvasRef.current;\n    //canvas.width = canvas.clientWidth;\n    //canvas.height = canvas.clientHeight;\n    const context = canvas.getContext('2d');\n    let frameCount = 0;\n    let animationFrameId;\n    const render = () => {\n      frameCount++;\n      draw(context, canvas, frameCount);\n      animationFrameId = window.requestAnimationFrame(render);\n    };\n    render();\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, [data, viewConfig, captureConfig, savedCaptureConfig, cursorConfig]);\n\n\n  return <canvas className=\"plot\" ref={canvasRef}/>;\n}\nexport default CanvasPlot;","/home/honza/dp/gui/src/SplashScreen.js",[],"/home/honza/dp/gui/src/Capture.js",["124","125","126","127","128","129","130","131","132","133","134","135","136","137","138"],"import React, {useEffect, useState} from 'react';\nimport {getNumActiveChannels, formatValue} from './Utils';\n\nexport default function Capture({captureConfig, setCaptureConfig, setSavedCaptureConfig, captureState, setCaptureState, setCaptureData, USBDevice}) {\nconst [complete, setComplete] = useState(true);\n\nasync function readSingle() {\n  try {\n        // Set the current captureConfig as savedCaptureConfig\n        // A deep copy needs to be created\n        let savedCaptureConfig = JSON.parse(JSON.stringify(captureConfig));\n        setSavedCaptureConfig(savedCaptureConfig);\n        console.log('Requesting capture:', JSON.stringify(savedCaptureConfig));\n\n        // Send capture configuration to the device\n        let captureConfigMessage = captureConfigToByteArray(savedCaptureConfig);    \n        console.log(\"encoded request:\", captureConfigMessage);\n\n        await USBDevice.transferOut(3, captureConfigMessage);\n    \n        let result;\n    \n        // Wait for capture status message from the device\n        // Status can be either OK = 0, Aborted = 1 or Timeout = 2\n        result = await pollUSB(1);\n        let captureStatus = result.data.getUint8();\n        console.log('Capture status', captureStatus);\n        if (captureStatus != 0) {\n          console.log(\"Capture was aborted!\");\n          setComplete(true);\n          return;\n        }\n    \n        // Read trigger index and parse\n        result = await pollUSB(1);\n        let trigIndex = result.data.getUint32(0, true);\n        console.log('trigger:', trigIndex); \n        \n        console.log('requesting bytes', savedCaptureConfig.captureDepth * getNumActiveChannels(savedCaptureConfig) * 2);\n        result = await USBDevice.transferIn(3, savedCaptureConfig.captureDepth * getNumActiveChannels(savedCaptureConfig) * 2);\n        console.log('reply:', result);\n\n        let rawData = [];\n        for (let i = 0; i < savedCaptureConfig.captureDepth * getNumActiveChannels(savedCaptureConfig) * 2; i+=2) \n        rawData.push(result.data.getUint16(i, true) / 16);\n\n        trigIndex -= trigIndex % getNumActiveChannels(savedCaptureConfig);\n        \n        //let rawShiftedData = rawData;\n        let rawShiftedData = rawData.slice(trigIndex).concat(rawData.slice(0, trigIndex));\n\n        let parsedData = [[],[],[]];\n        let i = 0;\n\n        // This solves the issue with channel order being swapped in the capture buffer when activeChannels = [0, 1, 1]\n        if (!savedCaptureConfig.activeChannels[0] && savedCaptureConfig.activeChannels[1] && savedCaptureConfig.activeChannels[2])\n          while (i < savedCaptureConfig.captureDepth * getNumActiveChannels(savedCaptureConfig)) {\n            parsedData[2].push(rawShiftedData[i++]);\n            parsedData[1].push(rawShiftedData[i++]);\n          }\n        else \n          while (i < savedCaptureConfig.captureDepth * getNumActiveChannels(savedCaptureConfig)) {\n            if (savedCaptureConfig.activeChannels[0]) {\n              parsedData[0].push(rawShiftedData[i]);\n              i++;\n            }\n            if (savedCaptureConfig.activeChannels[1]) {\n              parsedData[1].push(rawShiftedData[i]);\n              i++;\n            }\n            if (savedCaptureConfig.activeChannels[2]) {\n              parsedData[2].push(rawShiftedData[i]);\n              i++;\n            }\n          }\n\n        console.log(parsedData);\n        setCaptureData(parsedData);\n\n      } catch (error) {\n        console.log(\"Capture failed:\", error);\n        setCaptureState(\"Stopped\");\n      }\n\n        setComplete(true);\n        return true;\n}\n\nfunction captureConfigToByteArray(cfg) {\n  let activeChannelsByte = 0;\n    for (let i = 0; i < cfg.activeChannels.length; i++) {\n        if (cfg.activeChannels[i]) activeChannelsByte += 1 << i;\n    }\n    let captureDepth_kb = cfg.captureDepth / 1000;\n\n    let pretriggerByte = cfg.preTrigger * 10;\n\n    let captureModeByte = cfg.captureMode == \"Auto\" ? 1 : 0;\n\n    let sampleRateByte = cfg.sampleRate / 10000;\n\n    let triggerChannelsByte = 0;\n    for (let i = 0; i < cfg.trigger.channels.length; i++) {\n        if (cfg.trigger.channels[i]) triggerChannelsByte += 1 << i;\n    }\n\n    let triggerEdgeByte;\n    if (captureConfig.trigger.edge == \"UP\") triggerEdgeByte = 0;\n    else if (captureConfig.trigger.edge == \"DOWN\") triggerEdgeByte = 1;\n    else triggerEdgeByte = 2;\n\n\n    return new Uint8Array([\n        1, \n        cfg.trigger.threshold, \n        activeChannelsByte, \n        captureDepth_kb, \n        pretriggerByte, \n        captureModeByte, \n        sampleRateByte,\n        triggerChannelsByte,\n        triggerEdgeByte\n    ]);\n}\n\nfunction abortCapture() {\n    let abortMessage = new Uint8Array([0]);\n    USBDevice.transferOut(3, abortMessage);\n\n    setCaptureState(\"Stopped\");\n  }\n\n  useEffect(() => {\n    const capture = async () => {\n    if (complete && captureState == \"Run\") {\n      setComplete(false);\n      readSingle();\n    }\n    else if (complete && captureState == \"Single\") {\n      setComplete(false);\n      await readSingle();\n      console.log(\"Stop.\");\n      setCaptureState(\"Stopped\");\n    }\n  }\n  capture();\n  }, [complete, captureState]);\n\nfunction toggleCaptureMode() {\n    let newCaptureMode = captureConfig.captureMode == \"Auto\" ? \"Normal\" : \"Auto\";\n    setCaptureConfig({...captureConfig, captureMode: newCaptureMode});\n  }\n\nasync function pollUSB(len) {\n    let result\n    do {\n    result = await USBDevice.transferIn(3, 4);\n    await new Promise(res => setTimeout(res, 50));\n    } while (result.data.byteLength == 0);\n    return result;\n}\n\n    return (\n        <div>\n        <button \n          onClick={() => {setCaptureState(\"Run\"); setCaptureData([[], [], []])}} \n          disabled={USBDevice == null}\n          style={captureState == \"Run\" ? {backgroundColor: \"#0076fa\", color: 'lightgray', boxShadow: \"0px 0px 5px #0076fa\"} : {}}\n        >\n        {captureState == \"Run\" ? \"Running\" : \"Run\"}</button>\n\n\n        <button onClick={() => {setCaptureState(\"Single\"); setCaptureData([[], [], []])}} disabled={USBDevice == null}\n        style={captureState == \"Single\" ? {backgroundColor: \"#0076fa\", color: 'lightgray', boxShadow: \"0px 0px 5px #0076fa\"} : {}}\n        >Single</button>\n        \n        <button \n          onClick={abortCapture} \n          style={captureState == \"Stopped\" ? {backgroundColor: \"#e10f00\", color: 'lightgray', boxShadow: \"0px 0px 5px #e10f00\"} : {}}\n        >{captureState == \"Stopped\" ? \"Stopped\" : \"Stop\"}</button>\n\n        <button onClick={toggleCaptureMode}>{captureConfig.captureMode}</button>\n      </div>\n    );\n}","/home/honza/dp/gui/src/CaptureDepthAndSampleRateConfig.js",[],"/home/honza/dp/gui/src/SideMenu.js",[],"/home/honza/dp/gui/src/MultiRangeSlider.js",["139","140","141","142"],"import React, { useCallback, useEffect, useState, useRef } from \"react\";\nimport classnames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport \"./MultiRangeSlider.css\";\n\nconst MultiRangeSlider = ({cursorConfig, setCursorConfig, captureConfig, viewConfig }) => {\n  let min = viewConfig.horizontal.viewCenter - captureConfig.captureDepth / viewConfig.horizontal.zoom / 2 + 1;\n  let zoomLen = captureConfig.captureDepth / viewConfig.horizontal.zoom;\n  let max = min + zoomLen - 2;\n    \n  const [minVal, setMinVal] = useState(min);\n  const [maxVal, setMaxVal] = useState(max);\n  const minValRef = useRef(null);\n  const maxValRef = useRef(null);\n  const range = useRef(null);\n\n\n  \n\n\n  // Convert to percentage\n  const getPercent = useCallback(\n    (value) => Math.round(((value - min) / (max - min)) * 100),\n    [min, max]\n  );\n\n  // Set width of the range to decrease from the left side\n  useEffect(() => {\n    if (maxValRef.current) {\n      const minPercent = getPercent(minVal);\n      const maxPercent = getPercent(+maxValRef.current.value); // Preceding with '+' converts the value from type string to type number\n\n      if (range.current) {\n        range.current.style.left = `${minPercent}%`;\n        range.current.style.width = `${maxPercent - minPercent}%`;\n      }\n    }\n  }, [minVal, getPercent]);\n\n  // Set width of the range to decrease from the right side\n  useEffect(() => {\n    if (minValRef.current) {\n      const minPercent = getPercent(+minValRef.current.value);\n      const maxPercent = getPercent(maxVal);\n\n      if (range.current) {\n        range.current.style.width = `${maxPercent - minPercent}%`;\n      }\n    }\n  }, [maxVal, getPercent]);\n\n  // Get min and max values when their state changes\n  useEffect(() => {\n    //onChange({ min: minVal, max: maxVal });\n\n\n    if (minVal != cursorConfig.start || maxVal != cursorConfig.end) {\n        setCursorConfig({...cursorConfig, start: minVal, end: maxVal});\n    }\n  }, [minVal, maxVal]);\n\n  return (\n    <div className=\"container\">\n      <input\n        type=\"range\"\n        min={min}\n        max={max}\n        value={minVal}\n        ref={minValRef}\n        onChange={(event) => {\n          const value = Math.min(+event.target.value, maxVal - 1);\n          setMinVal(value);\n          event.target.value = value.toString();\n        }}\n        className={classnames(\"thumb thumb--zindex-3\", {\n          \"thumb--zindex-5\": minVal > max - 100\n        })}\n      />\n      <input\n        type=\"range\"\n        min={min}\n        max={max}\n        value={maxVal}\n        ref={maxValRef}\n        onChange={(event) => {\n          const value = Math.max(+event.target.value, minVal + 1);\n          setMaxVal(value);\n          event.target.value = value.toString();\n        }}\n        className=\"thumb thumb--zindex-4\"\n      />\n\n      <div className=\"slider\">\n        <div className=\"slider__track\" />\n        <div ref={range} className=\"slider__range\" />\n\n      </div>\n    </div>\n  );\n};\n\n\n\nexport default MultiRangeSlider;\n","/home/honza/dp/gui/src/CaptureSave.js",[],"/home/honza/dp/gui/src/SettingControl.js",[],"/home/honza/dp/gui/src/ValueBox.js",[],"/home/honza/dp/gui/src/Utils.js",["143"],"function getNumActiveChannels(captureConfig) {\n    let ret = 0;\n    captureConfig.activeChannels.forEach(element => {if (element) ret++});\n    return ret;\n}\n\nfunction formatValue(val) {\n    if (val == 0) return \"0\";\n    let isNegative = val < 0;\n    val = Math.abs(val);\n    let prefixes = ['G','M' ,'k', '', 'm', 'µ', 'n'];\n    let prefixIndex = 3;\n    while (val >= 1000) {\n        prefixIndex--;\n        val /= 1000;\n    }\n    while (val < 1) {\n        prefixIndex++;\n        val *= 1000;\n    }\n    let beforeDecimal = String(Math.floor(val));\n    let afterDecimal = String(Math.round((val % 1) * 1000));\n    while (afterDecimal.length < 3) afterDecimal = '0' + afterDecimal;\n    return (isNegative ? '-' : '') + beforeDecimal + '.' + afterDecimal + prefixes[prefixIndex];\n}\n\nexport {getNumActiveChannels, formatValue};",{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","severity":1,"message":"149","line":1,"column":16,"nodeType":"150","messageId":"151","endLine":1,"endColumn":25},{"ruleId":"148","severity":1,"message":"152","line":87,"column":9,"nodeType":"150","messageId":"151","endLine":87,"endColumn":15},{"ruleId":"148","severity":1,"message":"153","line":1,"column":16,"nodeType":"150","messageId":"151","endLine":1,"endColumn":24},{"ruleId":"148","severity":1,"message":"154","line":4,"column":8,"nodeType":"150","messageId":"151","endLine":4,"endColumn":21},{"ruleId":"155","severity":1,"message":"156","line":34,"column":103,"nodeType":"157","messageId":"158","endLine":34,"endColumn":105},{"ruleId":"155","severity":1,"message":"156","line":35,"column":103,"nodeType":"157","messageId":"158","endLine":35,"endColumn":105},{"ruleId":"155","severity":1,"message":"156","line":36,"column":103,"nodeType":"157","messageId":"158","endLine":36,"endColumn":105},{"ruleId":"148","severity":1,"message":"153","line":2,"column":16,"nodeType":"150","messageId":"151","endLine":2,"endColumn":24},{"ruleId":"155","severity":1,"message":"156","line":10,"column":13,"nodeType":"157","messageId":"158","endLine":10,"endColumn":15},{"ruleId":"155","severity":1,"message":"156","line":14,"column":48,"nodeType":"157","messageId":"158","endLine":14,"endColumn":50},{"ruleId":"155","severity":1,"message":"156","line":17,"column":13,"nodeType":"157","messageId":"158","endLine":17,"endColumn":15},{"ruleId":"155","severity":1,"message":"156","line":29,"column":13,"nodeType":"157","messageId":"158","endLine":29,"endColumn":15},{"ruleId":"155","severity":1,"message":"156","line":30,"column":18,"nodeType":"157","messageId":"158","endLine":30,"endColumn":20},{"ruleId":"155","severity":1,"message":"156","line":31,"column":18,"nodeType":"157","messageId":"158","endLine":31,"endColumn":20},{"ruleId":"148","severity":1,"message":"153","line":2,"column":16,"nodeType":"150","messageId":"151","endLine":2,"endColumn":24},{"ruleId":"148","severity":1,"message":"159","line":4,"column":31,"nodeType":"150","messageId":"151","endLine":4,"endColumn":42},{"ruleId":"155","severity":1,"message":"156","line":14,"column":15,"nodeType":"157","messageId":"158","endLine":14,"endColumn":17},{"ruleId":"155","severity":1,"message":"156","line":17,"column":20,"nodeType":"157","messageId":"158","endLine":17,"endColumn":22},{"ruleId":"155","severity":1,"message":"156","line":17,"column":37,"nodeType":"157","messageId":"158","endLine":17,"endColumn":39},{"ruleId":"155","severity":1,"message":"156","line":21,"column":15,"nodeType":"157","messageId":"158","endLine":21,"endColumn":17},{"ruleId":"155","severity":1,"message":"156","line":22,"column":19,"nodeType":"157","messageId":"158","endLine":22,"endColumn":21},{"ruleId":"155","severity":1,"message":"156","line":24,"column":20,"nodeType":"157","messageId":"158","endLine":24,"endColumn":22},{"ruleId":"155","severity":1,"message":"156","line":25,"column":19,"nodeType":"157","messageId":"158","endLine":25,"endColumn":21},{"ruleId":"155","severity":1,"message":"156","line":27,"column":20,"nodeType":"157","messageId":"158","endLine":27,"endColumn":22},{"ruleId":"155","severity":1,"message":"156","line":28,"column":19,"nodeType":"157","messageId":"158","endLine":28,"endColumn":21},{"ruleId":"155","severity":1,"message":"156","line":40,"column":13,"nodeType":"157","messageId":"158","endLine":40,"endColumn":15},{"ruleId":"155","severity":1,"message":"156","line":46,"column":13,"nodeType":"157","messageId":"158","endLine":46,"endColumn":15},{"ruleId":"155","severity":1,"message":"156","line":47,"column":18,"nodeType":"157","messageId":"158","endLine":47,"endColumn":20},{"ruleId":"155","severity":1,"message":"156","line":54,"column":96,"nodeType":"157","messageId":"158","endLine":54,"endColumn":98},{"ruleId":"148","severity":1,"message":"153","line":2,"column":16,"nodeType":"150","messageId":"151","endLine":2,"endColumn":24},{"ruleId":"155","severity":1,"message":"156","line":15,"column":13,"nodeType":"157","messageId":"158","endLine":15,"endColumn":15},{"ruleId":"155","severity":1,"message":"156","line":16,"column":18,"nodeType":"157","messageId":"158","endLine":16,"endColumn":20},{"ruleId":"155","severity":1,"message":"156","line":17,"column":18,"nodeType":"157","messageId":"158","endLine":17,"endColumn":20},{"ruleId":"155","severity":1,"message":"156","line":61,"column":107,"nodeType":"157","messageId":"158","endLine":61,"endColumn":109},{"ruleId":"155","severity":1,"message":"156","line":62,"column":109,"nodeType":"157","messageId":"158","endLine":62,"endColumn":111},{"ruleId":"155","severity":1,"message":"156","line":63,"column":109,"nodeType":"157","messageId":"158","endLine":63,"endColumn":111},{"ruleId":"148","severity":1,"message":"159","line":2,"column":31,"nodeType":"150","messageId":"151","endLine":2,"endColumn":42},{"ruleId":"160","severity":1,"message":"161","line":180,"column":6,"nodeType":"162","endLine":180,"endColumn":73,"suggestions":"163"},{"ruleId":"148","severity":1,"message":"159","line":2,"column":31,"nodeType":"150","messageId":"151","endLine":2,"endColumn":42},{"ruleId":"155","severity":1,"message":"164","line":28,"column":27,"nodeType":"157","messageId":"158","endLine":28,"endColumn":29},{"ruleId":"155","severity":1,"message":"156","line":98,"column":43,"nodeType":"157","messageId":"158","endLine":98,"endColumn":45},{"ruleId":"155","severity":1,"message":"156","line":108,"column":36,"nodeType":"157","messageId":"158","endLine":108,"endColumn":38},{"ruleId":"155","severity":1,"message":"156","line":109,"column":41,"nodeType":"157","messageId":"158","endLine":109,"endColumn":43},{"ruleId":"155","severity":1,"message":"156","line":135,"column":34,"nodeType":"157","messageId":"158","endLine":135,"endColumn":36},{"ruleId":"155","severity":1,"message":"156","line":139,"column":39,"nodeType":"157","messageId":"158","endLine":139,"endColumn":41},{"ruleId":"160","severity":1,"message":"165","line":147,"column":6,"nodeType":"162","endLine":147,"endColumn":30,"suggestions":"166"},{"ruleId":"155","severity":1,"message":"156","line":150,"column":52,"nodeType":"157","messageId":"158","endLine":150,"endColumn":54},{"ruleId":"155","severity":1,"message":"156","line":159,"column":37,"nodeType":"157","messageId":"158","endLine":159,"endColumn":39},{"ruleId":"155","severity":1,"message":"156","line":168,"column":31,"nodeType":"157","messageId":"158","endLine":168,"endColumn":33},{"ruleId":"155","severity":1,"message":"156","line":170,"column":23,"nodeType":"157","messageId":"158","endLine":170,"endColumn":25},{"ruleId":"155","severity":1,"message":"156","line":174,"column":29,"nodeType":"157","messageId":"158","endLine":174,"endColumn":31},{"ruleId":"155","severity":1,"message":"156","line":179,"column":31,"nodeType":"157","messageId":"158","endLine":179,"endColumn":33},{"ruleId":"155","severity":1,"message":"156","line":180,"column":24,"nodeType":"157","messageId":"158","endLine":180,"endColumn":26},{"ruleId":"148","severity":1,"message":"167","line":3,"column":8,"nodeType":"150","messageId":"151","endLine":3,"endColumn":17},{"ruleId":"155","severity":1,"message":"164","line":57,"column":16,"nodeType":"157","messageId":"158","endLine":57,"endColumn":18},{"ruleId":"155","severity":1,"message":"164","line":57,"column":48,"nodeType":"157","messageId":"158","endLine":57,"endColumn":50},{"ruleId":"160","severity":1,"message":"168","line":60,"column":6,"nodeType":"162","endLine":60,"endColumn":22,"suggestions":"169"},{"ruleId":"155","severity":1,"message":"156","line":8,"column":13,"nodeType":"157","messageId":"158","endLine":8,"endColumn":15},"no-native-reassign",["170"],"no-negated-in-lhs",["171"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'result' is assigned a value but never used.","'useState' is defined but never used.","'ChannelPicker' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'formatValue' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'draw'. Either include it or remove the dependency array.","ArrayExpression",["172"],"Expected '!==' and instead saw '!='.","React Hook useEffect has missing dependencies: 'readSingle' and 'setCaptureState'. Either include them or remove the dependency array. If 'setCaptureState' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["173"],"'PropTypes' is defined but never used.","React Hook useEffect has missing dependencies: 'cursorConfig' and 'setCursorConfig'. Either include them or remove the dependency array. If 'setCursorConfig' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["174"],"no-global-assign","no-unsafe-negation",{"desc":"175","fix":"176"},{"desc":"177","fix":"178"},{"desc":"179","fix":"180"},"Update the dependencies array to be: [data, viewConfig, captureConfig, savedCaptureConfig, cursorConfig, draw]",{"range":"181","text":"182"},"Update the dependencies array to be: [complete, captureState, readSingle, setCaptureState]",{"range":"183","text":"184"},"Update the dependencies array to be: [minVal, maxVal, cursorConfig, setCursorConfig]",{"range":"185","text":"186"},[6555,6622],"[data, viewConfig, captureConfig, savedCaptureConfig, cursorConfig, draw]",[5106,5130],"[complete, captureState, readSingle, setCaptureState]",[1943,1959],"[minVal, maxVal, cursorConfig, setCursorConfig]"]