{"ast":null,"code":"import { scheduleMicrotask } from './utils'; // TYPES\n// CLASS\n\nexport var NotifyManager = /*#__PURE__*/function () {\n  function NotifyManager() {\n    this.queue = [];\n    this.transactions = 0;\n\n    this.notifyFn = function (callback) {\n      callback();\n    };\n\n    this.batchNotifyFn = function (callback) {\n      callback();\n    };\n  }\n\n  var _proto = NotifyManager.prototype;\n\n  _proto.batch = function batch(callback) {\n    var result;\n    this.transactions++;\n\n    try {\n      result = callback();\n    } finally {\n      this.transactions--;\n\n      if (!this.transactions) {\n        this.flush();\n      }\n    }\n\n    return result;\n  };\n\n  _proto.schedule = function schedule(callback) {\n    var _this = this;\n\n    if (this.transactions) {\n      this.queue.push(callback);\n    } else {\n      scheduleMicrotask(function () {\n        _this.notifyFn(callback);\n      });\n    }\n  }\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n  ;\n\n  _proto.batchCalls = function batchCalls(callback) {\n    var _this2 = this;\n\n    return function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this2.schedule(function () {\n        callback.apply(void 0, args);\n      });\n    };\n  };\n\n  _proto.flush = function flush() {\n    var _this3 = this;\n\n    var queue = this.queue;\n    this.queue = [];\n\n    if (queue.length) {\n      scheduleMicrotask(function () {\n        _this3.batchNotifyFn(function () {\n          queue.forEach(function (callback) {\n            _this3.notifyFn(callback);\n          });\n        });\n      });\n    }\n  }\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n  ;\n\n  _proto.setNotifyFunction = function setNotifyFunction(fn) {\n    this.notifyFn = fn;\n  }\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n  ;\n\n  _proto.setBatchNotifyFunction = function setBatchNotifyFunction(fn) {\n    this.batchNotifyFn = fn;\n  };\n\n  return NotifyManager;\n}(); // SINGLETON\n\nexport var notifyManager = new NotifyManager();","map":{"version":3,"names":["scheduleMicrotask","NotifyManager","queue","transactions","notifyFn","callback","batchNotifyFn","_proto","prototype","batch","result","flush","schedule","_this","push","batchCalls","_this2","_len","arguments","length","args","Array","_key","apply","_this3","forEach","setNotifyFunction","fn","setBatchNotifyFunction","notifyManager"],"sources":["/home/honza/node_modules/react-query/es/core/notifyManager.js"],"sourcesContent":["import { scheduleMicrotask } from './utils'; // TYPES\n\n// CLASS\nexport var NotifyManager = /*#__PURE__*/function () {\n  function NotifyManager() {\n    this.queue = [];\n    this.transactions = 0;\n\n    this.notifyFn = function (callback) {\n      callback();\n    };\n\n    this.batchNotifyFn = function (callback) {\n      callback();\n    };\n  }\n\n  var _proto = NotifyManager.prototype;\n\n  _proto.batch = function batch(callback) {\n    var result;\n    this.transactions++;\n\n    try {\n      result = callback();\n    } finally {\n      this.transactions--;\n\n      if (!this.transactions) {\n        this.flush();\n      }\n    }\n\n    return result;\n  };\n\n  _proto.schedule = function schedule(callback) {\n    var _this = this;\n\n    if (this.transactions) {\n      this.queue.push(callback);\n    } else {\n      scheduleMicrotask(function () {\n        _this.notifyFn(callback);\n      });\n    }\n  }\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n  ;\n\n  _proto.batchCalls = function batchCalls(callback) {\n    var _this2 = this;\n\n    return function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this2.schedule(function () {\n        callback.apply(void 0, args);\n      });\n    };\n  };\n\n  _proto.flush = function flush() {\n    var _this3 = this;\n\n    var queue = this.queue;\n    this.queue = [];\n\n    if (queue.length) {\n      scheduleMicrotask(function () {\n        _this3.batchNotifyFn(function () {\n          queue.forEach(function (callback) {\n            _this3.notifyFn(callback);\n          });\n        });\n      });\n    }\n  }\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n  ;\n\n  _proto.setNotifyFunction = function setNotifyFunction(fn) {\n    this.notifyFn = fn;\n  }\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n  ;\n\n  _proto.setBatchNotifyFunction = function setBatchNotifyFunction(fn) {\n    this.batchNotifyFn = fn;\n  };\n\n  return NotifyManager;\n}(); // SINGLETON\n\nexport var notifyManager = new NotifyManager();"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,SAAlC,C,CAA6C;AAE7C;;AACA,OAAO,IAAIC,aAAa,GAAG,aAAa,YAAY;EAClD,SAASA,aAAT,GAAyB;IACvB,KAAKC,KAAL,GAAa,EAAb;IACA,KAAKC,YAAL,GAAoB,CAApB;;IAEA,KAAKC,QAAL,GAAgB,UAAUC,QAAV,EAAoB;MAClCA,QAAQ;IACT,CAFD;;IAIA,KAAKC,aAAL,GAAqB,UAAUD,QAAV,EAAoB;MACvCA,QAAQ;IACT,CAFD;EAGD;;EAED,IAAIE,MAAM,GAAGN,aAAa,CAACO,SAA3B;;EAEAD,MAAM,CAACE,KAAP,GAAe,SAASA,KAAT,CAAeJ,QAAf,EAAyB;IACtC,IAAIK,MAAJ;IACA,KAAKP,YAAL;;IAEA,IAAI;MACFO,MAAM,GAAGL,QAAQ,EAAjB;IACD,CAFD,SAEU;MACR,KAAKF,YAAL;;MAEA,IAAI,CAAC,KAAKA,YAAV,EAAwB;QACtB,KAAKQ,KAAL;MACD;IACF;;IAED,OAAOD,MAAP;EACD,CAfD;;EAiBAH,MAAM,CAACK,QAAP,GAAkB,SAASA,QAAT,CAAkBP,QAAlB,EAA4B;IAC5C,IAAIQ,KAAK,GAAG,IAAZ;;IAEA,IAAI,KAAKV,YAAT,EAAuB;MACrB,KAAKD,KAAL,CAAWY,IAAX,CAAgBT,QAAhB;IACD,CAFD,MAEO;MACLL,iBAAiB,CAAC,YAAY;QAC5Ba,KAAK,CAACT,QAAN,CAAeC,QAAf;MACD,CAFgB,CAAjB;IAGD;EACF;EACD;AACF;AACA;EAbE;;EAgBAE,MAAM,CAACQ,UAAP,GAAoB,SAASA,UAAT,CAAoBV,QAApB,EAA8B;IAChD,IAAIW,MAAM,GAAG,IAAb;;IAEA,OAAO,YAAY;MACjB,KAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAArB,EAA6BC,IAAI,GAAG,IAAIC,KAAJ,CAAUJ,IAAV,CAApC,EAAqDK,IAAI,GAAG,CAAjE,EAAoEA,IAAI,GAAGL,IAA3E,EAAiFK,IAAI,EAArF,EAAyF;QACvFF,IAAI,CAACE,IAAD,CAAJ,GAAaJ,SAAS,CAACI,IAAD,CAAtB;MACD;;MAEDN,MAAM,CAACJ,QAAP,CAAgB,YAAY;QAC1BP,QAAQ,CAACkB,KAAT,CAAe,KAAK,CAApB,EAAuBH,IAAvB;MACD,CAFD;IAGD,CARD;EASD,CAZD;;EAcAb,MAAM,CAACI,KAAP,GAAe,SAASA,KAAT,GAAiB;IAC9B,IAAIa,MAAM,GAAG,IAAb;;IAEA,IAAItB,KAAK,GAAG,KAAKA,KAAjB;IACA,KAAKA,KAAL,GAAa,EAAb;;IAEA,IAAIA,KAAK,CAACiB,MAAV,EAAkB;MAChBnB,iBAAiB,CAAC,YAAY;QAC5BwB,MAAM,CAAClB,aAAP,CAAqB,YAAY;UAC/BJ,KAAK,CAACuB,OAAN,CAAc,UAAUpB,QAAV,EAAoB;YAChCmB,MAAM,CAACpB,QAAP,CAAgBC,QAAhB;UACD,CAFD;QAGD,CAJD;MAKD,CANgB,CAAjB;IAOD;EACF;EACD;AACF;AACA;AACA;EAnBE;;EAsBAE,MAAM,CAACmB,iBAAP,GAA2B,SAASA,iBAAT,CAA2BC,EAA3B,EAA+B;IACxD,KAAKvB,QAAL,GAAgBuB,EAAhB;EACD;EACD;AACF;AACA;AACA;EANE;;EASApB,MAAM,CAACqB,sBAAP,GAAgC,SAASA,sBAAT,CAAgCD,EAAhC,EAAoC;IAClE,KAAKrB,aAAL,GAAqBqB,EAArB;EACD,CAFD;;EAIA,OAAO1B,aAAP;AACD,CAnGuC,EAAjC,C,CAmGF;;AAEL,OAAO,IAAI4B,aAAa,GAAG,IAAI5B,aAAJ,EAApB"},"metadata":{},"sourceType":"module"}