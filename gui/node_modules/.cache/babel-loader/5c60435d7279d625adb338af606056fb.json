{"ast":null,"code":"class ColorRGBA {\n  constructor(r, g, b, a) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n    this.a = a;\n  }\n\n}\n/**\r\n * Baseline class\r\n */\n\n\nclass WebglBase {\n  /**\r\n   * @internal\r\n   */\n  constructor() {\n    this.scaleX = 1;\n    this.scaleY = 1;\n    this.offsetX = 0;\n    this.offsetY = 0;\n    this.loop = false;\n    this._vbuffer = 0;\n    this._coord = 0;\n    this.visible = true;\n    this.intensity = 1;\n    this.xy = new Float32Array([]);\n    this.numPoints = 0;\n    this.color = new ColorRGBA(0, 0, 0, 1);\n    this.webglNumPoints = 0;\n  }\n\n}\n/**\r\n * The standard Line class\r\n */\n\n\nclass WebglLine extends WebglBase {\n  /**\r\n   * Create a new line\r\n   * @param c - the color of the line\r\n   * @param numPoints - number of data pints\r\n   * @example\r\n   * ```typescript\r\n   * x= [0,1]\r\n   * y= [1,2]\r\n   * line = new WebglLine( new ColorRGBA(0.1,0.1,0.1,1), 2);\r\n   * ```\r\n   */\n  constructor(c, numPoints) {\n    super();\n    this.currentIndex = 0;\n    this.webglNumPoints = numPoints;\n    this.numPoints = numPoints;\n    this.color = c;\n    this.xy = new Float32Array(2 * this.webglNumPoints);\n  }\n  /**\r\n   * Set the X value at a specific index\r\n   * @param index - the index of the data point\r\n   * @param x - the horizontal value of the data point\r\n   */\n\n\n  setX(index, x) {\n    this.xy[index * 2] = x;\n  }\n  /**\r\n   * Set the Y value at a specific index\r\n   * @param index : the index of the data point\r\n   * @param y : the vertical value of the data point\r\n   */\n\n\n  setY(index, y) {\n    this.xy[index * 2 + 1] = y;\n  }\n  /**\r\n   * Get an X value at a specific index\r\n   * @param index - the index of X\r\n   */\n\n\n  getX(index) {\n    return this.xy[index * 2];\n  }\n  /**\r\n   * Get an Y value at a specific index\r\n   * @param index - the index of Y\r\n   */\n\n\n  getY(index) {\n    return this.xy[index * 2 + 1];\n  }\n  /**\r\n   * Make an equally spaced array of X points\r\n   * @param start  - the start of the series\r\n   * @param stepSize - step size between each data point\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * //x = [-1, -0.8, -0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8]\r\n   * const numX = 10;\r\n   * line.lineSpaceX(-1, 2 / numX);\r\n   * ```\r\n   */\n\n\n  lineSpaceX(start, stepSize) {\n    for (let i = 0; i < this.numPoints; i++) {\n      // set x to -num/2:1:+num/2\n      this.setX(i, start + stepSize * i);\n    }\n  }\n  /**\r\n   * Automatically generate X between -1 and 1\r\n   * equal to lineSpaceX(-1, 2/ number of points)\r\n   */\n\n\n  arrangeX() {\n    this.lineSpaceX(-1, 2 / this.numPoints);\n  }\n  /**\r\n   * Set a constant value for all Y values in the line\r\n   * @param c - constant value\r\n   */\n\n\n  constY(c) {\n    for (let i = 0; i < this.numPoints; i++) {\n      // set x to -num/2:1:+num/2\n      this.setY(i, c);\n    }\n  }\n  /**\r\n   * Add a new Y values to the end of current array and shift it, so that the total number of the pair remains the same\r\n   * @param data - the Y array\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * yArray = new Float32Array([3, 4, 5]);\r\n   * line.shiftAdd(yArray);\r\n   * ```\r\n   */\n\n\n  shiftAdd(data) {\n    const shiftSize = data.length;\n\n    for (let i = 0; i < this.numPoints - shiftSize; i++) {\n      this.setY(i, this.getY(i + shiftSize));\n    }\n\n    for (let i = 0; i < shiftSize; i++) {\n      this.setY(i + this.numPoints - shiftSize, data[i]);\n    }\n  }\n  /**\r\n   * Add new Y values to the line and maintain the position of the last data point\r\n   */\n\n\n  addArrayY(yArray) {\n    if (this.currentIndex + yArray.length <= this.numPoints) {\n      for (let i = 0; i < yArray.length; i++) {\n        this.setY(this.currentIndex, yArray[i]);\n        this.currentIndex++;\n      }\n    }\n  }\n  /**\r\n   * Replace the all Y values of the line\r\n   */\n\n\n  replaceArrayY(yArray) {\n    if (yArray.length == this.numPoints) {\n      for (let i = 0; i < this.numPoints; i++) {\n        this.setY(i, yArray[i]);\n      }\n    }\n  }\n\n}\n/**\r\n * The step based line plot\r\n */\n\n\nclass WebglStep extends WebglBase {\n  /**\r\n   * Create a new step line\r\n   * @param c - the color of the line\r\n   * @param numPoints - number of data pints\r\n   * @example\r\n   * ```typescript\r\n   * x= [0,1]\r\n   * y= [1,2]\r\n   * line = new WebglStep( new ColorRGBA(0.1,0.1,0.1,1), 2);\r\n   * ```\r\n   */\n  constructor(c, num) {\n    super();\n    this.webglNumPoints = num * 2;\n    this.numPoints = num;\n    this.color = c;\n    this.xy = new Float32Array(2 * this.webglNumPoints);\n  }\n  /**\r\n   * Set the Y value at a specific index\r\n   * @param index - the index of the data point\r\n   * @param y - the vertical value of the data point\r\n   */\n\n\n  setY(index, y) {\n    this.xy[index * 4 + 1] = y;\n    this.xy[index * 4 + 3] = y;\n  }\n\n  getX(index) {\n    return this.xy[index * 4];\n  }\n  /**\r\n   * Get an X value at a specific index\r\n   * @param index - the index of X\r\n   */\n\n\n  getY(index) {\n    return this.xy[index * 4 + 1];\n  }\n  /**\r\n   * Make an equally spaced array of X points\r\n   * @param start  - the start of the series\r\n   * @param stepSize - step size between each data point\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * //x = [-1, -0.8, -0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8]\r\n   * const numX = 10;\r\n   * line.lineSpaceX(-1, 2 / numX);\r\n   * ```\r\n   */\n\n\n  lineSpaceX(start, stepsize) {\n    for (let i = 0; i < this.numPoints; i++) {\n      // set x to -num/2:1:+num/2\n      this.xy[i * 4] = start + i * stepsize;\n      this.xy[i * 4 + 2] = start + (i * stepsize + stepsize);\n    }\n  }\n  /**\r\n   * Set a constant value for all Y values in the line\r\n   * @param c - constant value\r\n   */\n\n\n  constY(c) {\n    for (let i = 0; i < this.numPoints; i++) {\n      // set x to -num/2:1:+num/2\n      this.setY(i, c);\n    }\n  }\n  /**\r\n   * Add a new Y values to the end of current array and shift it, so that the total number of the pair remains the same\r\n   * @param data - the Y array\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * yArray = new Float32Array([3, 4, 5]);\r\n   * line.shiftAdd(yArray);\r\n   * ```\r\n   */\n\n\n  shiftAdd(data) {\n    const shiftSize = data.length;\n\n    for (let i = 0; i < this.numPoints - shiftSize; i++) {\n      this.setY(i, this.getY(i + shiftSize));\n    }\n\n    for (let i = 0; i < shiftSize; i++) {\n      this.setY(i + this.numPoints - shiftSize, data[i]);\n    }\n  }\n\n}\n\nclass WebglPolar extends WebglBase {\n  constructor(c, numPoints) {\n    super();\n    this.webglNumPoints = numPoints;\n    this.numPoints = numPoints;\n    this.color = c;\n    this.intenisty = 1;\n    this.xy = new Float32Array(2 * this.webglNumPoints);\n    this._vbuffer = 0;\n    this._coord = 0;\n    this.visible = true;\n    this.offsetTheta = 0;\n  }\n  /**\r\n   * @param index: index of the line\r\n   * @param theta : angle in deg\r\n   * @param r : radius\r\n   */\n\n\n  setRtheta(index, theta, r) {\n    //const rA = Math.abs(r);\n    //const thetaA = theta % 360;\n    const x = r * Math.cos(2 * Math.PI * (theta + this.offsetTheta) / 360);\n    const y = r * Math.sin(2 * Math.PI * (theta + this.offsetTheta) / 360); //const index = Math.round( ((theta % 360)/360) * this.numPoints );\n\n    this.setX(index, x);\n    this.setY(index, y);\n  }\n\n  getTheta(index) {\n    //return Math.tan\n    return 0;\n  }\n\n  getR(index) {\n    //return Math.tan\n    return Math.sqrt(Math.pow(this.getX(index), 2) + Math.pow(this.getY(index), 2));\n  }\n\n  setX(index, x) {\n    this.xy[index * 2] = x;\n  }\n\n  setY(index, y) {\n    this.xy[index * 2 + 1] = y;\n  }\n\n  getX(index) {\n    return this.xy[index * 2];\n  }\n\n  getY(index) {\n    return this.xy[index * 2 + 1];\n  }\n\n}\n/**\r\n * The Square class\r\n */\n\n\nclass WebglSquare extends WebglBase {\n  /**\r\n   * Create a new line\r\n   * @param c - the color of the line\r\n   * @example\r\n   * ```typescript\r\n   * line = new WebglSquare( new ColorRGBA(0.1,0.1,0.1,0.5) );\r\n   * ```\r\n   */\n  constructor(c) {\n    super();\n    this.webglNumPoints = 4;\n    this.numPoints = 4;\n    this.color = c;\n    this.xy = new Float32Array(2 * this.webglNumPoints);\n  }\n  /**\r\n   * draw a square\r\n   * @param x1 start x\r\n   * @param y1 start y\r\n   * @param x2 end x\r\n   * @param y2 end y\r\n   */\n\n\n  setSquare(x1, y1, x2, y2) {\n    this.xy = new Float32Array([x1, y1, x1, y2, x2, y1, x2, y2]);\n  }\n\n}\n/**\r\n * modified functions from:\r\n * https://github.com/stackgl/gl-vec2\r\n * See License2.md for more info\r\n */\n\n\nconst scaleAndAdd = (a, b, scale) => {\n  const out = {\n    x: 0,\n    y: 0\n  };\n  out.x = a.x + b.x * scale;\n  out.y = a.y + b.y * scale;\n  return out;\n};\n\nconst normal = dir => {\n  //get perpendicular\n  const out = set(-dir.y, dir.x);\n  return out;\n};\n\nconst direction = (a, b) => {\n  //get unit dir of two lines\n  let out = subtract(a, b);\n  out = normalize(out);\n  return out;\n};\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\n\nconst add = (a, b) => {\n  const out = {\n    x: 0,\n    y: 0\n  };\n  out.x = a.x + b.x;\n  out.y = a.y + b.y;\n  return out;\n};\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\n\nconst dot = (a, b) => {\n  return a.x * b.x + a.y * b.y;\n};\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\n\n\nconst normalize = a => {\n  const out = {\n    x: 0,\n    y: 0\n  };\n  let len = a.x * a.x + a.y * a.y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out.x = a.x * len;\n    out.y = a.y * len;\n  }\n\n  return out;\n};\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\n\n\nconst set = (x, y) => {\n  const out = {\n    x: 0,\n    y: 0\n  };\n  out.x = x;\n  out.y = y;\n  return out;\n};\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\n\nconst subtract = (a, b) => {\n  const out = {\n    x: 0,\n    y: 0\n  };\n  out.x = a.x - b.x;\n  out.y = a.y - b.y;\n  return out;\n};\n/**\r\n * inspired and modified from:\r\n * https://github.com/mattdesl/polyline-normals\r\n * See License1.md for more info\r\n */\n\n\nconst PolyLine = lineXY => {\n  let curNormal;\n  let lineA = {\n    x: 0,\n    y: 0\n  };\n  let lineB = {\n    x: 0,\n    y: 0\n  };\n  const out = [];\n\n  const addNext = (normal, length) => {\n    out.push({\n      vec2: normal,\n      miterLength: length\n    });\n  };\n\n  const getXY = index => {\n    return {\n      x: lineXY[index * 2],\n      y: lineXY[index * 2 + 1]\n    };\n  }; // add initial normals\n\n\n  lineA = direction(getXY(1), getXY(0));\n  curNormal = normal(lineA);\n  addNext(curNormal, 1);\n  const numPoints = lineXY.length / 2;\n\n  for (let i = 1; i < numPoints - 1; i++) {\n    const last = getXY(i - 1);\n    const cur = getXY(i);\n    const next = getXY(i + 1);\n    lineA = direction(cur, last);\n    curNormal = normal(lineA);\n    lineB = direction(next, cur); //stores tangent & miter\n\n    const miter = computeMiter(lineA, lineB);\n    const miterLen = computeMiterLen(lineA, miter, 1);\n    addNext(miter, miterLen);\n  } // add last normal\n  // no miter, simple segment\n\n\n  lineA = direction(getXY(numPoints - 1), getXY(numPoints - 2));\n  curNormal = normal(lineA); //reset normal\n\n  addNext(curNormal, 1);\n  return out;\n};\n\nconst computeMiter = (lineA, lineB) => {\n  //get tangent line\n  let tangent = add(lineA, lineB);\n  tangent = normalize(tangent); //get miter as a unit vector\n\n  const miter = set(-tangent.y, tangent.x);\n  return miter;\n};\n\nconst computeMiterLen = (lineA, miter, halfThick) => {\n  const tmp = set(-lineA.y, lineA.x); //get the necessary length of our miter\n\n  return halfThick / dot(miter, tmp);\n};\n/**\r\n * The standard Line class\r\n */\n\n\nclass WebglThickLine extends WebglBase {\n  /**\r\n   * Create a new line\r\n   * @param c - the color of the line\r\n   * @param numPoints - number of data pints\r\n   * @example\r\n   * ```typescript\r\n   * x= [0,1]\r\n   * y= [1,2]\r\n   * line = new WebglLine( new ColorRGBA(0.1,0.1,0.1,1), 2);\r\n   * ```\r\n   */\n  constructor(c, numPoints, thickness) {\n    super();\n    this.currentIndex = 0;\n    this._thicknessRequested = 0;\n    this._actualThickness = 0;\n    this.webglNumPoints = numPoints * 2;\n    this.numPoints = numPoints;\n    this.color = c;\n    this._thicknessRequested = thickness;\n    this._linePoints = new Float32Array(numPoints * 2); //this.triPoints = new Float32Array(this.numPoints * 4);\n\n    this.xy = new Float32Array(2 * this.webglNumPoints);\n  }\n\n  convertToTriPoints() {\n    //const thick = 0.01;\n    const halfThick = this._actualThickness / 2;\n    const normals = PolyLine(this._linePoints); //console.log(this.linePoints);\n    //console.log(normals);\n\n    for (let i = 0; i < this.numPoints; i++) {\n      const x = this._linePoints[2 * i];\n      const y = this._linePoints[2 * i + 1];\n      const point = {\n        x: x,\n        y: y\n      };\n      const top = scaleAndAdd(point, normals[i].vec2, normals[i].miterLength * halfThick);\n      const bot = scaleAndAdd(point, normals[i].vec2, -normals[i].miterLength * halfThick);\n      this.xy[i * 4] = top.x;\n      this.xy[i * 4 + 1] = top.y;\n      this.xy[i * 4 + 2] = bot.x;\n      this.xy[i * 4 + 3] = bot.y;\n    }\n  }\n  /**\r\n   * Set the X value at a specific index\r\n   * @param index - the index of the data point\r\n   * @param x - the horizontal value of the data point\r\n   */\n\n\n  setX(index, x) {\n    this._linePoints[index * 2] = x;\n  }\n  /**\r\n   * Set the Y value at a specific index\r\n   * @param index : the index of the data point\r\n   * @param y : the vertical value of the data point\r\n   */\n\n\n  setY(index, y) {\n    this._linePoints[index * 2 + 1] = y;\n  }\n  /**\r\n   * Make an equally spaced array of X points\r\n   * @param start  - the start of the series\r\n   * @param stepSize - step size between each data point\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * //x = [-1, -0.8, -0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8]\r\n   * const numX = 10;\r\n   * line.lineSpaceX(-1, 2 / numX);\r\n   * ```\r\n   */\n\n\n  lineSpaceX(start, stepSize) {\n    for (let i = 0; i < this.numPoints; i++) {\n      // set x to -num/2:1:+num/2\n      this.setX(i, start + stepSize * i);\n    }\n  }\n\n  setThickness(thickness) {\n    this._thicknessRequested = thickness;\n  }\n\n  getThickness() {\n    return this._thicknessRequested;\n  }\n\n  setActualThickness(thickness) {\n    this._actualThickness = thickness;\n  }\n\n}\n/**\r\n * Author Danial Chitnis 2019-20\r\n *\r\n * inspired by:\r\n * https://codepen.io/AzazelN28\r\n * https://www.tutorialspoint.com/webgl/webgl_modes_of_drawing.htm\r\n */\n\n/**\r\n * The main class for the webgl-plot library\r\n */\n\n\nclass WebglPlot {\n  /**\r\n   * Create a webgl-plot instance\r\n   * @param canvas - the canvas in which the plot appears\r\n   * @param debug - (Optional) log debug messages to console\r\n   *\r\n   * @example\r\n   *\r\n   * For HTMLCanvas\r\n   * ```typescript\r\n   * const canvas = document.getElementbyId(\"canvas\");\r\n   *\r\n   * const devicePixelRatio = window.devicePixelRatio || 1;\r\n   * canvas.width = canvas.clientWidth * devicePixelRatio;\r\n   * canvas.height = canvas.clientHeight * devicePixelRatio;\r\n   *\r\n   * const webglp = new WebGLplot(canvas);\r\n   * ...\r\n   * ```\r\n   * @example\r\n   *\r\n   * For OffScreenCanvas\r\n   * ```typescript\r\n   * const offscreen = htmlCanvas.transferControlToOffscreen();\r\n   *\r\n   * offscreen.width = htmlCanvas.clientWidth * window.devicePixelRatio;\r\n   * offscreen.height = htmlCanvas.clientHeight * window.devicePixelRatio;\r\n   *\r\n   * const worker = new Worker(\"offScreenCanvas.js\", { type: \"module\" });\r\n   * worker.postMessage({ canvas: offscreen }, [offscreen]);\r\n   * ```\r\n   * Then in offScreenCanvas.js\r\n   * ```typescript\r\n   * onmessage = function (evt) {\r\n   * const wglp = new WebGLplot(evt.data.canvas);\r\n   * ...\r\n   * }\r\n   * ```\r\n   */\n  constructor(canvas, options) {\n    /**\r\n     * log debug output\r\n     */\n    this.debug = false;\n    this.addLine = this.addDataLine;\n\n    if (options == undefined) {\n      this.webgl = canvas.getContext(\"webgl\", {\n        antialias: true,\n        transparent: false\n      });\n    } else {\n      this.webgl = canvas.getContext(\"webgl\", {\n        antialias: options.antialias,\n        transparent: options.transparent,\n        desynchronized: options.deSync,\n        powerPerformance: options.powerPerformance,\n        preserveDrawing: options.preserveDrawing\n      });\n      this.debug = options.debug == undefined ? false : options.debug;\n    }\n\n    this.log(\"canvas type is: \" + canvas.constructor.name);\n    this.log(`[webgl-plot]:width=${canvas.width}, height=${canvas.height}`);\n    this._linesData = [];\n    this._linesAux = [];\n    this._thickLines = [];\n    this._surfaces = []; //this.webgl = webgl;\n\n    this.gScaleX = 1;\n    this.gScaleY = 1;\n    this.gXYratio = 1;\n    this.gOffsetX = 0;\n    this.gOffsetY = 0;\n    this.gLog10X = false;\n    this.gLog10Y = false; // Clear the color\n\n    this.webgl.clear(this.webgl.COLOR_BUFFER_BIT); // Set the view port\n\n    this.webgl.viewport(0, 0, canvas.width, canvas.height);\n    this._progLine = this.webgl.createProgram();\n    this.initThinLineProgram(); //https://learnopengl.com/Advanced-OpenGL/Blending\n\n    this.webgl.enable(this.webgl.BLEND);\n    this.webgl.blendFunc(this.webgl.SRC_ALPHA, this.webgl.ONE_MINUS_SRC_ALPHA);\n  }\n\n  get linesData() {\n    return this._linesData;\n  }\n\n  get linesAux() {\n    return this._linesAux;\n  }\n\n  get thickLines() {\n    return this._thickLines;\n  }\n\n  get surfaces() {\n    return this._surfaces;\n  }\n  /**\r\n   * updates and redraws the content of the plot\r\n   */\n\n\n  _drawLines(lines) {\n    const webgl = this.webgl;\n    lines.forEach(line => {\n      if (line.visible) {\n        webgl.useProgram(this._progLine);\n        const uscale = webgl.getUniformLocation(this._progLine, \"uscale\");\n        webgl.uniformMatrix2fv(uscale, false, new Float32Array([line.scaleX * this.gScaleX * (this.gLog10X ? 1 / Math.log(10) : 1), 0, 0, line.scaleY * this.gScaleY * this.gXYratio * (this.gLog10Y ? 1 / Math.log(10) : 1)]));\n        const uoffset = webgl.getUniformLocation(this._progLine, \"uoffset\");\n        webgl.uniform2fv(uoffset, new Float32Array([line.offsetX + this.gOffsetX, line.offsetY + this.gOffsetY]));\n        const isLog = webgl.getUniformLocation(this._progLine, \"is_log\");\n        webgl.uniform2iv(isLog, new Int32Array([this.gLog10X ? 1 : 0, this.gLog10Y ? 1 : 0]));\n        const uColor = webgl.getUniformLocation(this._progLine, \"uColor\");\n        webgl.uniform4fv(uColor, [line.color.r, line.color.g, line.color.b, line.color.a]);\n        webgl.bufferData(webgl.ARRAY_BUFFER, line.xy, webgl.STREAM_DRAW);\n        webgl.drawArrays(line.loop ? webgl.LINE_LOOP : webgl.LINE_STRIP, 0, line.webglNumPoints);\n      }\n    });\n  }\n\n  _drawSurfaces(squares) {\n    const webgl = this.webgl;\n    squares.forEach(square => {\n      if (square.visible) {\n        webgl.useProgram(this._progLine);\n        const uscale = webgl.getUniformLocation(this._progLine, \"uscale\");\n        webgl.uniformMatrix2fv(uscale, false, new Float32Array([square.scaleX * this.gScaleX * (this.gLog10X ? 1 / Math.log(10) : 1), 0, 0, square.scaleY * this.gScaleY * this.gXYratio * (this.gLog10Y ? 1 / Math.log(10) : 1)]));\n        const uoffset = webgl.getUniformLocation(this._progLine, \"uoffset\");\n        webgl.uniform2fv(uoffset, new Float32Array([square.offsetX + this.gOffsetX, square.offsetY + this.gOffsetY]));\n        const isLog = webgl.getUniformLocation(this._progLine, \"is_log\");\n        webgl.uniform2iv(isLog, new Int32Array([this.gLog10X ? 1 : 0, this.gLog10Y ? 1 : 0]));\n        const uColor = webgl.getUniformLocation(this._progLine, \"uColor\");\n        webgl.uniform4fv(uColor, [square.color.r, square.color.g, square.color.b, square.color.a]);\n        webgl.bufferData(webgl.ARRAY_BUFFER, square.xy, webgl.STREAM_DRAW);\n        webgl.drawArrays(webgl.TRIANGLE_STRIP, 0, square.webglNumPoints);\n      }\n    });\n  }\n\n  _drawTriangles(thickLine) {\n    const webgl = this.webgl;\n    webgl.bufferData(webgl.ARRAY_BUFFER, thickLine.xy, webgl.STREAM_DRAW);\n    webgl.useProgram(this._progLine);\n    const uscale = webgl.getUniformLocation(this._progLine, \"uscale\");\n    webgl.uniformMatrix2fv(uscale, false, new Float32Array([thickLine.scaleX * this.gScaleX * (this.gLog10X ? 1 / Math.log(10) : 1), 0, 0, thickLine.scaleY * this.gScaleY * this.gXYratio * (this.gLog10Y ? 1 / Math.log(10) : 1)]));\n    const uoffset = webgl.getUniformLocation(this._progLine, \"uoffset\");\n    webgl.uniform2fv(uoffset, new Float32Array([thickLine.offsetX + this.gOffsetX, thickLine.offsetY + this.gOffsetY]));\n    const isLog = webgl.getUniformLocation(this._progLine, \"is_log\");\n    webgl.uniform2iv(isLog, new Int32Array([0, 0]));\n    const uColor = webgl.getUniformLocation(this._progLine, \"uColor\");\n    webgl.uniform4fv(uColor, [thickLine.color.r, thickLine.color.g, thickLine.color.b, thickLine.color.a]);\n    webgl.drawArrays(webgl.TRIANGLE_STRIP, 0, thickLine.xy.length / 2);\n  }\n\n  _drawThickLines() {\n    this._thickLines.forEach(thickLine => {\n      if (thickLine.visible) {\n        const calibFactor = Math.min(this.gScaleX, this.gScaleY); //const calibFactor = 10;\n        //console.log(thickLine.getThickness());\n\n        thickLine.setActualThickness(thickLine.getThickness() / calibFactor);\n        thickLine.convertToTriPoints();\n\n        this._drawTriangles(thickLine);\n      }\n    });\n  }\n  /**\r\n   * Draw and clear the canvas\r\n   */\n\n\n  update() {\n    this.clear();\n    this.draw();\n  }\n  /**\r\n   * Draw without clearing the canvas\r\n   */\n\n\n  draw() {\n    this._drawLines(this.linesData);\n\n    this._drawLines(this.linesAux);\n\n    this._drawThickLines();\n\n    this._drawSurfaces(this.surfaces);\n  }\n  /**\r\n   * Clear the canvas\r\n   */\n\n\n  clear() {\n    //this.webgl.clearColor(0.1, 0.1, 0.1, 1.0);\n    this.webgl.clear(this.webgl.COLOR_BUFFER_BIT);\n  }\n  /**\r\n   * adds a line to the plot\r\n   * @param line - this could be any of line, linestep, histogram, or polar\r\n   *\r\n   * @example\r\n   * ```typescript\r\n   * const line = new line(color, numPoints);\r\n   * wglp.addLine(line);\r\n   * ```\r\n   */\n\n\n  _addLine(line) {\n    //line.initProgram(this.webgl);\n    line._vbuffer = this.webgl.createBuffer();\n    this.webgl.bindBuffer(this.webgl.ARRAY_BUFFER, line._vbuffer);\n    this.webgl.bufferData(this.webgl.ARRAY_BUFFER, line.xy, this.webgl.STREAM_DRAW); //this.webgl.bindBuffer(this.webgl.ARRAY_BUFFER, line._vbuffer);\n\n    line._coord = this.webgl.getAttribLocation(this._progLine, \"coordinates\");\n    this.webgl.vertexAttribPointer(line._coord, 2, this.webgl.FLOAT, false, 0, 0);\n    this.webgl.enableVertexAttribArray(line._coord);\n  }\n\n  addDataLine(line) {\n    this._addLine(line);\n\n    this.linesData.push(line);\n  }\n\n  addAuxLine(line) {\n    this._addLine(line);\n\n    this.linesAux.push(line);\n  }\n\n  addThickLine(thickLine) {\n    this._addLine(thickLine);\n\n    this._thickLines.push(thickLine);\n  }\n\n  addSurface(surface) {\n    this._addLine(surface);\n\n    this.surfaces.push(surface);\n  }\n\n  initThinLineProgram() {\n    const vertCode = `\n      attribute vec2 coordinates;\n      uniform mat2 uscale;\n      uniform vec2 uoffset;\n      uniform ivec2 is_log;\n\n      void main(void) {\n         float x = (is_log[0]==1) ? log(coordinates.x) : coordinates.x;\n         float y = (is_log[1]==1) ? log(coordinates.y) : coordinates.y;\n         vec2 line = vec2(x, y);\n         gl_Position = vec4(uscale*line + uoffset, 0.0, 1.0);\n      }`; // Create a vertex shader object\n\n    const vertShader = this.webgl.createShader(this.webgl.VERTEX_SHADER); // Attach vertex shader source code\n\n    this.webgl.shaderSource(vertShader, vertCode); // Compile the vertex shader\n\n    this.webgl.compileShader(vertShader); // Fragment shader source code\n\n    const fragCode = `\n         precision mediump float;\n         uniform highp vec4 uColor;\n         void main(void) {\n            gl_FragColor =  uColor;\n         }`;\n    const fragShader = this.webgl.createShader(this.webgl.FRAGMENT_SHADER);\n    this.webgl.shaderSource(fragShader, fragCode);\n    this.webgl.compileShader(fragShader);\n    this._progLine = this.webgl.createProgram();\n    this.webgl.attachShader(this._progLine, vertShader);\n    this.webgl.attachShader(this._progLine, fragShader);\n    this.webgl.linkProgram(this._progLine);\n  }\n  /**\r\n   * remove the last data line\r\n   */\n\n\n  popDataLine() {\n    this.linesData.pop();\n  }\n  /**\r\n   * remove all the lines\r\n   */\n\n\n  removeAllLines() {\n    this._linesData = [];\n    this._linesAux = [];\n    this._thickLines = [];\n    this._surfaces = [];\n  }\n  /**\r\n   * remove all data lines\r\n   */\n\n\n  removeDataLines() {\n    this._linesData = [];\n  }\n  /**\r\n   * remove all auxiliary lines\r\n   */\n\n\n  removeAuxLines() {\n    this._linesAux = [];\n  }\n  /**\r\n   * Change the WbGL viewport\r\n   * @param a\r\n   * @param b\r\n   * @param c\r\n   * @param d\r\n   */\n\n\n  viewport(a, b, c, d) {\n    this.webgl.viewport(a, b, c, d);\n  }\n\n  log(str) {\n    if (this.debug) {\n      console.log(\"[webgl-plot]:\" + str);\n    }\n  }\n\n}\n\nexport { ColorRGBA, WebglLine, WebglPlot, WebglPolar, WebglSquare, WebglStep, WebglThickLine };","map":{"version":3,"names":["ColorRGBA","constructor","r","g","b","a","WebglBase","scaleX","scaleY","offsetX","offsetY","loop","_vbuffer","_coord","visible","intensity","xy","Float32Array","numPoints","color","webglNumPoints","WebglLine","c","currentIndex","setX","index","x","setY","y","getX","getY","lineSpaceX","start","stepSize","i","arrangeX","constY","shiftAdd","data","shiftSize","length","addArrayY","yArray","replaceArrayY","WebglStep","num","stepsize","WebglPolar","intenisty","offsetTheta","setRtheta","theta","Math","cos","PI","sin","getTheta","getR","sqrt","pow","WebglSquare","setSquare","x1","y1","x2","y2","scaleAndAdd","scale","out","normal","dir","set","direction","subtract","normalize","add","dot","len","PolyLine","lineXY","curNormal","lineA","lineB","addNext","push","vec2","miterLength","getXY","last","cur","next","miter","computeMiter","miterLen","computeMiterLen","tangent","halfThick","tmp","WebglThickLine","thickness","_thicknessRequested","_actualThickness","_linePoints","convertToTriPoints","normals","point","top","bot","setThickness","getThickness","setActualThickness","WebglPlot","canvas","options","debug","addLine","addDataLine","undefined","webgl","getContext","antialias","transparent","desynchronized","deSync","powerPerformance","preserveDrawing","log","name","width","height","_linesData","_linesAux","_thickLines","_surfaces","gScaleX","gScaleY","gXYratio","gOffsetX","gOffsetY","gLog10X","gLog10Y","clear","COLOR_BUFFER_BIT","viewport","_progLine","createProgram","initThinLineProgram","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","linesData","linesAux","thickLines","surfaces","_drawLines","lines","forEach","line","useProgram","uscale","getUniformLocation","uniformMatrix2fv","uoffset","uniform2fv","isLog","uniform2iv","Int32Array","uColor","uniform4fv","bufferData","ARRAY_BUFFER","STREAM_DRAW","drawArrays","LINE_LOOP","LINE_STRIP","_drawSurfaces","squares","square","TRIANGLE_STRIP","_drawTriangles","thickLine","_drawThickLines","calibFactor","min","update","draw","_addLine","createBuffer","bindBuffer","getAttribLocation","vertexAttribPointer","FLOAT","enableVertexAttribArray","addAuxLine","addThickLine","addSurface","surface","vertCode","vertShader","createShader","VERTEX_SHADER","shaderSource","compileShader","fragCode","fragShader","FRAGMENT_SHADER","attachShader","linkProgram","popDataLine","pop","removeAllLines","removeDataLines","removeAuxLines","d","str","console"],"sources":["/home/honza/webusb-test/node_modules/webgl-plot/dist/webglplot.esm.mjs"],"sourcesContent":["class ColorRGBA {\r\n    constructor(r, g, b, a) {\r\n        this.r = r;\r\n        this.g = g;\r\n        this.b = b;\r\n        this.a = a;\r\n    }\r\n}\n\n/**\r\n * Baseline class\r\n */\r\nclass WebglBase {\r\n    /**\r\n     * @internal\r\n     */\r\n    constructor() {\r\n        this.scaleX = 1;\r\n        this.scaleY = 1;\r\n        this.offsetX = 0;\r\n        this.offsetY = 0;\r\n        this.loop = false;\r\n        this._vbuffer = 0;\r\n        this._coord = 0;\r\n        this.visible = true;\r\n        this.intensity = 1;\r\n        this.xy = new Float32Array([]);\r\n        this.numPoints = 0;\r\n        this.color = new ColorRGBA(0, 0, 0, 1);\r\n        this.webglNumPoints = 0;\r\n    }\r\n}\n\n/**\r\n * The standard Line class\r\n */\r\nclass WebglLine extends WebglBase {\r\n    /**\r\n     * Create a new line\r\n     * @param c - the color of the line\r\n     * @param numPoints - number of data pints\r\n     * @example\r\n     * ```typescript\r\n     * x= [0,1]\r\n     * y= [1,2]\r\n     * line = new WebglLine( new ColorRGBA(0.1,0.1,0.1,1), 2);\r\n     * ```\r\n     */\r\n    constructor(c, numPoints) {\r\n        super();\r\n        this.currentIndex = 0;\r\n        this.webglNumPoints = numPoints;\r\n        this.numPoints = numPoints;\r\n        this.color = c;\r\n        this.xy = new Float32Array(2 * this.webglNumPoints);\r\n    }\r\n    /**\r\n     * Set the X value at a specific index\r\n     * @param index - the index of the data point\r\n     * @param x - the horizontal value of the data point\r\n     */\r\n    setX(index, x) {\r\n        this.xy[index * 2] = x;\r\n    }\r\n    /**\r\n     * Set the Y value at a specific index\r\n     * @param index : the index of the data point\r\n     * @param y : the vertical value of the data point\r\n     */\r\n    setY(index, y) {\r\n        this.xy[index * 2 + 1] = y;\r\n    }\r\n    /**\r\n     * Get an X value at a specific index\r\n     * @param index - the index of X\r\n     */\r\n    getX(index) {\r\n        return this.xy[index * 2];\r\n    }\r\n    /**\r\n     * Get an Y value at a specific index\r\n     * @param index - the index of Y\r\n     */\r\n    getY(index) {\r\n        return this.xy[index * 2 + 1];\r\n    }\r\n    /**\r\n     * Make an equally spaced array of X points\r\n     * @param start  - the start of the series\r\n     * @param stepSize - step size between each data point\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * //x = [-1, -0.8, -0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8]\r\n     * const numX = 10;\r\n     * line.lineSpaceX(-1, 2 / numX);\r\n     * ```\r\n     */\r\n    lineSpaceX(start, stepSize) {\r\n        for (let i = 0; i < this.numPoints; i++) {\r\n            // set x to -num/2:1:+num/2\r\n            this.setX(i, start + stepSize * i);\r\n        }\r\n    }\r\n    /**\r\n     * Automatically generate X between -1 and 1\r\n     * equal to lineSpaceX(-1, 2/ number of points)\r\n     */\r\n    arrangeX() {\r\n        this.lineSpaceX(-1, 2 / this.numPoints);\r\n    }\r\n    /**\r\n     * Set a constant value for all Y values in the line\r\n     * @param c - constant value\r\n     */\r\n    constY(c) {\r\n        for (let i = 0; i < this.numPoints; i++) {\r\n            // set x to -num/2:1:+num/2\r\n            this.setY(i, c);\r\n        }\r\n    }\r\n    /**\r\n     * Add a new Y values to the end of current array and shift it, so that the total number of the pair remains the same\r\n     * @param data - the Y array\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * yArray = new Float32Array([3, 4, 5]);\r\n     * line.shiftAdd(yArray);\r\n     * ```\r\n     */\r\n    shiftAdd(data) {\r\n        const shiftSize = data.length;\r\n        for (let i = 0; i < this.numPoints - shiftSize; i++) {\r\n            this.setY(i, this.getY(i + shiftSize));\r\n        }\r\n        for (let i = 0; i < shiftSize; i++) {\r\n            this.setY(i + this.numPoints - shiftSize, data[i]);\r\n        }\r\n    }\r\n    /**\r\n     * Add new Y values to the line and maintain the position of the last data point\r\n     */\r\n    addArrayY(yArray) {\r\n        if (this.currentIndex + yArray.length <= this.numPoints) {\r\n            for (let i = 0; i < yArray.length; i++) {\r\n                this.setY(this.currentIndex, yArray[i]);\r\n                this.currentIndex++;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Replace the all Y values of the line\r\n     */\r\n    replaceArrayY(yArray) {\r\n        if (yArray.length == this.numPoints) {\r\n            for (let i = 0; i < this.numPoints; i++) {\r\n                this.setY(i, yArray[i]);\r\n            }\r\n        }\r\n    }\r\n}\n\n/**\r\n * The step based line plot\r\n */\r\nclass WebglStep extends WebglBase {\r\n    /**\r\n     * Create a new step line\r\n     * @param c - the color of the line\r\n     * @param numPoints - number of data pints\r\n     * @example\r\n     * ```typescript\r\n     * x= [0,1]\r\n     * y= [1,2]\r\n     * line = new WebglStep( new ColorRGBA(0.1,0.1,0.1,1), 2);\r\n     * ```\r\n     */\r\n    constructor(c, num) {\r\n        super();\r\n        this.webglNumPoints = num * 2;\r\n        this.numPoints = num;\r\n        this.color = c;\r\n        this.xy = new Float32Array(2 * this.webglNumPoints);\r\n    }\r\n    /**\r\n     * Set the Y value at a specific index\r\n     * @param index - the index of the data point\r\n     * @param y - the vertical value of the data point\r\n     */\r\n    setY(index, y) {\r\n        this.xy[index * 4 + 1] = y;\r\n        this.xy[index * 4 + 3] = y;\r\n    }\r\n    getX(index) {\r\n        return this.xy[index * 4];\r\n    }\r\n    /**\r\n     * Get an X value at a specific index\r\n     * @param index - the index of X\r\n     */\r\n    getY(index) {\r\n        return this.xy[index * 4 + 1];\r\n    }\r\n    /**\r\n     * Make an equally spaced array of X points\r\n     * @param start  - the start of the series\r\n     * @param stepSize - step size between each data point\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * //x = [-1, -0.8, -0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8]\r\n     * const numX = 10;\r\n     * line.lineSpaceX(-1, 2 / numX);\r\n     * ```\r\n     */\r\n    lineSpaceX(start, stepsize) {\r\n        for (let i = 0; i < this.numPoints; i++) {\r\n            // set x to -num/2:1:+num/2\r\n            this.xy[i * 4] = start + i * stepsize;\r\n            this.xy[i * 4 + 2] = start + (i * stepsize + stepsize);\r\n        }\r\n    }\r\n    /**\r\n     * Set a constant value for all Y values in the line\r\n     * @param c - constant value\r\n     */\r\n    constY(c) {\r\n        for (let i = 0; i < this.numPoints; i++) {\r\n            // set x to -num/2:1:+num/2\r\n            this.setY(i, c);\r\n        }\r\n    }\r\n    /**\r\n     * Add a new Y values to the end of current array and shift it, so that the total number of the pair remains the same\r\n     * @param data - the Y array\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * yArray = new Float32Array([3, 4, 5]);\r\n     * line.shiftAdd(yArray);\r\n     * ```\r\n     */\r\n    shiftAdd(data) {\r\n        const shiftSize = data.length;\r\n        for (let i = 0; i < this.numPoints - shiftSize; i++) {\r\n            this.setY(i, this.getY(i + shiftSize));\r\n        }\r\n        for (let i = 0; i < shiftSize; i++) {\r\n            this.setY(i + this.numPoints - shiftSize, data[i]);\r\n        }\r\n    }\r\n}\n\nclass WebglPolar extends WebglBase {\r\n    constructor(c, numPoints) {\r\n        super();\r\n        this.webglNumPoints = numPoints;\r\n        this.numPoints = numPoints;\r\n        this.color = c;\r\n        this.intenisty = 1;\r\n        this.xy = new Float32Array(2 * this.webglNumPoints);\r\n        this._vbuffer = 0;\r\n        this._coord = 0;\r\n        this.visible = true;\r\n        this.offsetTheta = 0;\r\n    }\r\n    /**\r\n     * @param index: index of the line\r\n     * @param theta : angle in deg\r\n     * @param r : radius\r\n     */\r\n    setRtheta(index, theta, r) {\r\n        //const rA = Math.abs(r);\r\n        //const thetaA = theta % 360;\r\n        const x = r * Math.cos((2 * Math.PI * (theta + this.offsetTheta)) / 360);\r\n        const y = r * Math.sin((2 * Math.PI * (theta + this.offsetTheta)) / 360);\r\n        //const index = Math.round( ((theta % 360)/360) * this.numPoints );\r\n        this.setX(index, x);\r\n        this.setY(index, y);\r\n    }\r\n    getTheta(index) {\r\n        //return Math.tan\r\n        return 0;\r\n    }\r\n    getR(index) {\r\n        //return Math.tan\r\n        return Math.sqrt(Math.pow(this.getX(index), 2) + Math.pow(this.getY(index), 2));\r\n    }\r\n    setX(index, x) {\r\n        this.xy[index * 2] = x;\r\n    }\r\n    setY(index, y) {\r\n        this.xy[index * 2 + 1] = y;\r\n    }\r\n    getX(index) {\r\n        return this.xy[index * 2];\r\n    }\r\n    getY(index) {\r\n        return this.xy[index * 2 + 1];\r\n    }\r\n}\n\n/**\r\n * The Square class\r\n */\r\nclass WebglSquare extends WebglBase {\r\n    /**\r\n     * Create a new line\r\n     * @param c - the color of the line\r\n     * @example\r\n     * ```typescript\r\n     * line = new WebglSquare( new ColorRGBA(0.1,0.1,0.1,0.5) );\r\n     * ```\r\n     */\r\n    constructor(c) {\r\n        super();\r\n        this.webglNumPoints = 4;\r\n        this.numPoints = 4;\r\n        this.color = c;\r\n        this.xy = new Float32Array(2 * this.webglNumPoints);\r\n    }\r\n    /**\r\n     * draw a square\r\n     * @param x1 start x\r\n     * @param y1 start y\r\n     * @param x2 end x\r\n     * @param y2 end y\r\n     */\r\n    setSquare(x1, y1, x2, y2) {\r\n        this.xy = new Float32Array([x1, y1, x1, y2, x2, y1, x2, y2]);\r\n    }\r\n}\n\n/**\r\n * modified functions from:\r\n * https://github.com/stackgl/gl-vec2\r\n * See License2.md for more info\r\n */\r\nconst scaleAndAdd = (a, b, scale) => {\r\n    const out = { x: 0, y: 0 };\r\n    out.x = a.x + b.x * scale;\r\n    out.y = a.y + b.y * scale;\r\n    return out;\r\n};\r\nconst normal = (dir) => {\r\n    //get perpendicular\r\n    const out = set(-dir.y, dir.x);\r\n    return out;\r\n};\r\nconst direction = (a, b) => {\r\n    //get unit dir of two lines\r\n    let out = subtract(a, b);\r\n    out = normalize(out);\r\n    return out;\r\n};\r\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nconst add = (a, b) => {\r\n    const out = { x: 0, y: 0 };\r\n    out.x = a.x + b.x;\r\n    out.y = a.y + b.y;\r\n    return out;\r\n};\r\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\r\nconst dot = (a, b) => {\r\n    return a.x * b.x + a.y * b.y;\r\n};\r\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\r\nconst normalize = (a) => {\r\n    const out = { x: 0, y: 0 };\r\n    let len = a.x * a.x + a.y * a.y;\r\n    if (len > 0) {\r\n        //TODO: evaluate use of glm_invsqrt here?\r\n        len = 1 / Math.sqrt(len);\r\n        out.x = a.x * len;\r\n        out.y = a.y * len;\r\n    }\r\n    return out;\r\n};\r\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\r\nconst set = (x, y) => {\r\n    const out = { x: 0, y: 0 };\r\n    out.x = x;\r\n    out.y = y;\r\n    return out;\r\n};\r\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {vec2} a the first operand\r\n * @param {vec2} b the second operand\r\n * @returns {vec2} out\r\n */\r\nconst subtract = (a, b) => {\r\n    const out = { x: 0, y: 0 };\r\n    out.x = a.x - b.x;\r\n    out.y = a.y - b.y;\r\n    return out;\r\n};\n\n/**\r\n * inspired and modified from:\r\n * https://github.com/mattdesl/polyline-normals\r\n * See License1.md for more info\r\n */\r\nconst PolyLine = (lineXY) => {\r\n    let curNormal;\r\n    let lineA = { x: 0, y: 0 };\r\n    let lineB = { x: 0, y: 0 };\r\n    const out = [];\r\n    const addNext = (normal, length) => {\r\n        out.push({ vec2: normal, miterLength: length });\r\n    };\r\n    const getXY = (index) => {\r\n        return { x: lineXY[index * 2], y: lineXY[index * 2 + 1] };\r\n    };\r\n    // add initial normals\r\n    lineA = direction(getXY(1), getXY(0));\r\n    curNormal = normal(lineA);\r\n    addNext(curNormal, 1);\r\n    const numPoints = lineXY.length / 2;\r\n    for (let i = 1; i < numPoints - 1; i++) {\r\n        const last = getXY(i - 1);\r\n        const cur = getXY(i);\r\n        const next = getXY(i + 1);\r\n        lineA = direction(cur, last);\r\n        curNormal = normal(lineA);\r\n        lineB = direction(next, cur);\r\n        //stores tangent & miter\r\n        const miter = computeMiter(lineA, lineB);\r\n        const miterLen = computeMiterLen(lineA, miter, 1);\r\n        addNext(miter, miterLen);\r\n    }\r\n    // add last normal\r\n    // no miter, simple segment\r\n    lineA = direction(getXY(numPoints - 1), getXY(numPoints - 2));\r\n    curNormal = normal(lineA); //reset normal\r\n    addNext(curNormal, 1);\r\n    return out;\r\n};\r\nconst computeMiter = (lineA, lineB) => {\r\n    //get tangent line\r\n    let tangent = add(lineA, lineB);\r\n    tangent = normalize(tangent);\r\n    //get miter as a unit vector\r\n    const miter = set(-tangent.y, tangent.x);\r\n    return miter;\r\n};\r\nconst computeMiterLen = (lineA, miter, halfThick) => {\r\n    const tmp = set(-lineA.y, lineA.x);\r\n    //get the necessary length of our miter\r\n    return halfThick / dot(miter, tmp);\r\n};\n\n/**\r\n * The standard Line class\r\n */\r\nclass WebglThickLine extends WebglBase {\r\n    /**\r\n     * Create a new line\r\n     * @param c - the color of the line\r\n     * @param numPoints - number of data pints\r\n     * @example\r\n     * ```typescript\r\n     * x= [0,1]\r\n     * y= [1,2]\r\n     * line = new WebglLine( new ColorRGBA(0.1,0.1,0.1,1), 2);\r\n     * ```\r\n     */\r\n    constructor(c, numPoints, thickness) {\r\n        super();\r\n        this.currentIndex = 0;\r\n        this._thicknessRequested = 0;\r\n        this._actualThickness = 0;\r\n        this.webglNumPoints = numPoints * 2;\r\n        this.numPoints = numPoints;\r\n        this.color = c;\r\n        this._thicknessRequested = thickness;\r\n        this._linePoints = new Float32Array(numPoints * 2);\r\n        //this.triPoints = new Float32Array(this.numPoints * 4);\r\n        this.xy = new Float32Array(2 * this.webglNumPoints);\r\n    }\r\n    convertToTriPoints() {\r\n        //const thick = 0.01;\r\n        const halfThick = this._actualThickness / 2;\r\n        const normals = PolyLine(this._linePoints);\r\n        //console.log(this.linePoints);\r\n        //console.log(normals);\r\n        for (let i = 0; i < this.numPoints; i++) {\r\n            const x = this._linePoints[2 * i];\r\n            const y = this._linePoints[2 * i + 1];\r\n            const point = { x: x, y: y };\r\n            const top = scaleAndAdd(point, normals[i].vec2, normals[i].miterLength * halfThick);\r\n            const bot = scaleAndAdd(point, normals[i].vec2, -normals[i].miterLength * halfThick);\r\n            this.xy[i * 4] = top.x;\r\n            this.xy[i * 4 + 1] = top.y;\r\n            this.xy[i * 4 + 2] = bot.x;\r\n            this.xy[i * 4 + 3] = bot.y;\r\n        }\r\n    }\r\n    /**\r\n     * Set the X value at a specific index\r\n     * @param index - the index of the data point\r\n     * @param x - the horizontal value of the data point\r\n     */\r\n    setX(index, x) {\r\n        this._linePoints[index * 2] = x;\r\n    }\r\n    /**\r\n     * Set the Y value at a specific index\r\n     * @param index : the index of the data point\r\n     * @param y : the vertical value of the data point\r\n     */\r\n    setY(index, y) {\r\n        this._linePoints[index * 2 + 1] = y;\r\n    }\r\n    /**\r\n     * Make an equally spaced array of X points\r\n     * @param start  - the start of the series\r\n     * @param stepSize - step size between each data point\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * //x = [-1, -0.8, -0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8]\r\n     * const numX = 10;\r\n     * line.lineSpaceX(-1, 2 / numX);\r\n     * ```\r\n     */\r\n    lineSpaceX(start, stepSize) {\r\n        for (let i = 0; i < this.numPoints; i++) {\r\n            // set x to -num/2:1:+num/2\r\n            this.setX(i, start + stepSize * i);\r\n        }\r\n    }\r\n    setThickness(thickness) {\r\n        this._thicknessRequested = thickness;\r\n    }\r\n    getThickness() {\r\n        return this._thicknessRequested;\r\n    }\r\n    setActualThickness(thickness) {\r\n        this._actualThickness = thickness;\r\n    }\r\n}\n\n/**\r\n * Author Danial Chitnis 2019-20\r\n *\r\n * inspired by:\r\n * https://codepen.io/AzazelN28\r\n * https://www.tutorialspoint.com/webgl/webgl_modes_of_drawing.htm\r\n */\r\n/**\r\n * The main class for the webgl-plot library\r\n */\r\nclass WebglPlot {\r\n    /**\r\n     * Create a webgl-plot instance\r\n     * @param canvas - the canvas in which the plot appears\r\n     * @param debug - (Optional) log debug messages to console\r\n     *\r\n     * @example\r\n     *\r\n     * For HTMLCanvas\r\n     * ```typescript\r\n     * const canvas = document.getElementbyId(\"canvas\");\r\n     *\r\n     * const devicePixelRatio = window.devicePixelRatio || 1;\r\n     * canvas.width = canvas.clientWidth * devicePixelRatio;\r\n     * canvas.height = canvas.clientHeight * devicePixelRatio;\r\n     *\r\n     * const webglp = new WebGLplot(canvas);\r\n     * ...\r\n     * ```\r\n     * @example\r\n     *\r\n     * For OffScreenCanvas\r\n     * ```typescript\r\n     * const offscreen = htmlCanvas.transferControlToOffscreen();\r\n     *\r\n     * offscreen.width = htmlCanvas.clientWidth * window.devicePixelRatio;\r\n     * offscreen.height = htmlCanvas.clientHeight * window.devicePixelRatio;\r\n     *\r\n     * const worker = new Worker(\"offScreenCanvas.js\", { type: \"module\" });\r\n     * worker.postMessage({ canvas: offscreen }, [offscreen]);\r\n     * ```\r\n     * Then in offScreenCanvas.js\r\n     * ```typescript\r\n     * onmessage = function (evt) {\r\n     * const wglp = new WebGLplot(evt.data.canvas);\r\n     * ...\r\n     * }\r\n     * ```\r\n     */\r\n    constructor(canvas, options) {\r\n        /**\r\n         * log debug output\r\n         */\r\n        this.debug = false;\r\n        this.addLine = this.addDataLine;\r\n        if (options == undefined) {\r\n            this.webgl = canvas.getContext(\"webgl\", {\r\n                antialias: true,\r\n                transparent: false,\r\n            });\r\n        }\r\n        else {\r\n            this.webgl = canvas.getContext(\"webgl\", {\r\n                antialias: options.antialias,\r\n                transparent: options.transparent,\r\n                desynchronized: options.deSync,\r\n                powerPerformance: options.powerPerformance,\r\n                preserveDrawing: options.preserveDrawing,\r\n            });\r\n            this.debug = options.debug == undefined ? false : options.debug;\r\n        }\r\n        this.log(\"canvas type is: \" + canvas.constructor.name);\r\n        this.log(`[webgl-plot]:width=${canvas.width}, height=${canvas.height}`);\r\n        this._linesData = [];\r\n        this._linesAux = [];\r\n        this._thickLines = [];\r\n        this._surfaces = [];\r\n        //this.webgl = webgl;\r\n        this.gScaleX = 1;\r\n        this.gScaleY = 1;\r\n        this.gXYratio = 1;\r\n        this.gOffsetX = 0;\r\n        this.gOffsetY = 0;\r\n        this.gLog10X = false;\r\n        this.gLog10Y = false;\r\n        // Clear the color\r\n        this.webgl.clear(this.webgl.COLOR_BUFFER_BIT);\r\n        // Set the view port\r\n        this.webgl.viewport(0, 0, canvas.width, canvas.height);\r\n        this._progLine = this.webgl.createProgram();\r\n        this.initThinLineProgram();\r\n        //https://learnopengl.com/Advanced-OpenGL/Blending\r\n        this.webgl.enable(this.webgl.BLEND);\r\n        this.webgl.blendFunc(this.webgl.SRC_ALPHA, this.webgl.ONE_MINUS_SRC_ALPHA);\r\n    }\r\n    get linesData() {\r\n        return this._linesData;\r\n    }\r\n    get linesAux() {\r\n        return this._linesAux;\r\n    }\r\n    get thickLines() {\r\n        return this._thickLines;\r\n    }\r\n    get surfaces() {\r\n        return this._surfaces;\r\n    }\r\n    /**\r\n     * updates and redraws the content of the plot\r\n     */\r\n    _drawLines(lines) {\r\n        const webgl = this.webgl;\r\n        lines.forEach((line) => {\r\n            if (line.visible) {\r\n                webgl.useProgram(this._progLine);\r\n                const uscale = webgl.getUniformLocation(this._progLine, \"uscale\");\r\n                webgl.uniformMatrix2fv(uscale, false, new Float32Array([\r\n                    line.scaleX * this.gScaleX * (this.gLog10X ? 1 / Math.log(10) : 1),\r\n                    0,\r\n                    0,\r\n                    line.scaleY * this.gScaleY * this.gXYratio * (this.gLog10Y ? 1 / Math.log(10) : 1),\r\n                ]));\r\n                const uoffset = webgl.getUniformLocation(this._progLine, \"uoffset\");\r\n                webgl.uniform2fv(uoffset, new Float32Array([line.offsetX + this.gOffsetX, line.offsetY + this.gOffsetY]));\r\n                const isLog = webgl.getUniformLocation(this._progLine, \"is_log\");\r\n                webgl.uniform2iv(isLog, new Int32Array([this.gLog10X ? 1 : 0, this.gLog10Y ? 1 : 0]));\r\n                const uColor = webgl.getUniformLocation(this._progLine, \"uColor\");\r\n                webgl.uniform4fv(uColor, [line.color.r, line.color.g, line.color.b, line.color.a]);\r\n                webgl.bufferData(webgl.ARRAY_BUFFER, line.xy, webgl.STREAM_DRAW);\r\n                webgl.drawArrays(line.loop ? webgl.LINE_LOOP : webgl.LINE_STRIP, 0, line.webglNumPoints);\r\n            }\r\n        });\r\n    }\r\n    _drawSurfaces(squares) {\r\n        const webgl = this.webgl;\r\n        squares.forEach((square) => {\r\n            if (square.visible) {\r\n                webgl.useProgram(this._progLine);\r\n                const uscale = webgl.getUniformLocation(this._progLine, \"uscale\");\r\n                webgl.uniformMatrix2fv(uscale, false, new Float32Array([\r\n                    square.scaleX * this.gScaleX * (this.gLog10X ? 1 / Math.log(10) : 1),\r\n                    0,\r\n                    0,\r\n                    square.scaleY * this.gScaleY * this.gXYratio * (this.gLog10Y ? 1 / Math.log(10) : 1),\r\n                ]));\r\n                const uoffset = webgl.getUniformLocation(this._progLine, \"uoffset\");\r\n                webgl.uniform2fv(uoffset, new Float32Array([square.offsetX + this.gOffsetX, square.offsetY + this.gOffsetY]));\r\n                const isLog = webgl.getUniformLocation(this._progLine, \"is_log\");\r\n                webgl.uniform2iv(isLog, new Int32Array([this.gLog10X ? 1 : 0, this.gLog10Y ? 1 : 0]));\r\n                const uColor = webgl.getUniformLocation(this._progLine, \"uColor\");\r\n                webgl.uniform4fv(uColor, [square.color.r, square.color.g, square.color.b, square.color.a]);\r\n                webgl.bufferData(webgl.ARRAY_BUFFER, square.xy, webgl.STREAM_DRAW);\r\n                webgl.drawArrays(webgl.TRIANGLE_STRIP, 0, square.webglNumPoints);\r\n            }\r\n        });\r\n    }\r\n    _drawTriangles(thickLine) {\r\n        const webgl = this.webgl;\r\n        webgl.bufferData(webgl.ARRAY_BUFFER, thickLine.xy, webgl.STREAM_DRAW);\r\n        webgl.useProgram(this._progLine);\r\n        const uscale = webgl.getUniformLocation(this._progLine, \"uscale\");\r\n        webgl.uniformMatrix2fv(uscale, false, new Float32Array([\r\n            thickLine.scaleX * this.gScaleX * (this.gLog10X ? 1 / Math.log(10) : 1),\r\n            0,\r\n            0,\r\n            thickLine.scaleY * this.gScaleY * this.gXYratio * (this.gLog10Y ? 1 / Math.log(10) : 1),\r\n        ]));\r\n        const uoffset = webgl.getUniformLocation(this._progLine, \"uoffset\");\r\n        webgl.uniform2fv(uoffset, new Float32Array([thickLine.offsetX + this.gOffsetX, thickLine.offsetY + this.gOffsetY]));\r\n        const isLog = webgl.getUniformLocation(this._progLine, \"is_log\");\r\n        webgl.uniform2iv(isLog, new Int32Array([0, 0]));\r\n        const uColor = webgl.getUniformLocation(this._progLine, \"uColor\");\r\n        webgl.uniform4fv(uColor, [\r\n            thickLine.color.r,\r\n            thickLine.color.g,\r\n            thickLine.color.b,\r\n            thickLine.color.a,\r\n        ]);\r\n        webgl.drawArrays(webgl.TRIANGLE_STRIP, 0, thickLine.xy.length / 2);\r\n    }\r\n    _drawThickLines() {\r\n        this._thickLines.forEach((thickLine) => {\r\n            if (thickLine.visible) {\r\n                const calibFactor = Math.min(this.gScaleX, this.gScaleY);\r\n                //const calibFactor = 10;\r\n                //console.log(thickLine.getThickness());\r\n                thickLine.setActualThickness(thickLine.getThickness() / calibFactor);\r\n                thickLine.convertToTriPoints();\r\n                this._drawTriangles(thickLine);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Draw and clear the canvas\r\n     */\r\n    update() {\r\n        this.clear();\r\n        this.draw();\r\n    }\r\n    /**\r\n     * Draw without clearing the canvas\r\n     */\r\n    draw() {\r\n        this._drawLines(this.linesData);\r\n        this._drawLines(this.linesAux);\r\n        this._drawThickLines();\r\n        this._drawSurfaces(this.surfaces);\r\n    }\r\n    /**\r\n     * Clear the canvas\r\n     */\r\n    clear() {\r\n        //this.webgl.clearColor(0.1, 0.1, 0.1, 1.0);\r\n        this.webgl.clear(this.webgl.COLOR_BUFFER_BIT);\r\n    }\r\n    /**\r\n     * adds a line to the plot\r\n     * @param line - this could be any of line, linestep, histogram, or polar\r\n     *\r\n     * @example\r\n     * ```typescript\r\n     * const line = new line(color, numPoints);\r\n     * wglp.addLine(line);\r\n     * ```\r\n     */\r\n    _addLine(line) {\r\n        //line.initProgram(this.webgl);\r\n        line._vbuffer = this.webgl.createBuffer();\r\n        this.webgl.bindBuffer(this.webgl.ARRAY_BUFFER, line._vbuffer);\r\n        this.webgl.bufferData(this.webgl.ARRAY_BUFFER, line.xy, this.webgl.STREAM_DRAW);\r\n        //this.webgl.bindBuffer(this.webgl.ARRAY_BUFFER, line._vbuffer);\r\n        line._coord = this.webgl.getAttribLocation(this._progLine, \"coordinates\");\r\n        this.webgl.vertexAttribPointer(line._coord, 2, this.webgl.FLOAT, false, 0, 0);\r\n        this.webgl.enableVertexAttribArray(line._coord);\r\n    }\r\n    addDataLine(line) {\r\n        this._addLine(line);\r\n        this.linesData.push(line);\r\n    }\r\n    addAuxLine(line) {\r\n        this._addLine(line);\r\n        this.linesAux.push(line);\r\n    }\r\n    addThickLine(thickLine) {\r\n        this._addLine(thickLine);\r\n        this._thickLines.push(thickLine);\r\n    }\r\n    addSurface(surface) {\r\n        this._addLine(surface);\r\n        this.surfaces.push(surface);\r\n    }\r\n    initThinLineProgram() {\r\n        const vertCode = `\r\n      attribute vec2 coordinates;\r\n      uniform mat2 uscale;\r\n      uniform vec2 uoffset;\r\n      uniform ivec2 is_log;\r\n\r\n      void main(void) {\r\n         float x = (is_log[0]==1) ? log(coordinates.x) : coordinates.x;\r\n         float y = (is_log[1]==1) ? log(coordinates.y) : coordinates.y;\r\n         vec2 line = vec2(x, y);\r\n         gl_Position = vec4(uscale*line + uoffset, 0.0, 1.0);\r\n      }`;\r\n        // Create a vertex shader object\r\n        const vertShader = this.webgl.createShader(this.webgl.VERTEX_SHADER);\r\n        // Attach vertex shader source code\r\n        this.webgl.shaderSource(vertShader, vertCode);\r\n        // Compile the vertex shader\r\n        this.webgl.compileShader(vertShader);\r\n        // Fragment shader source code\r\n        const fragCode = `\r\n         precision mediump float;\r\n         uniform highp vec4 uColor;\r\n         void main(void) {\r\n            gl_FragColor =  uColor;\r\n         }`;\r\n        const fragShader = this.webgl.createShader(this.webgl.FRAGMENT_SHADER);\r\n        this.webgl.shaderSource(fragShader, fragCode);\r\n        this.webgl.compileShader(fragShader);\r\n        this._progLine = this.webgl.createProgram();\r\n        this.webgl.attachShader(this._progLine, vertShader);\r\n        this.webgl.attachShader(this._progLine, fragShader);\r\n        this.webgl.linkProgram(this._progLine);\r\n    }\r\n    /**\r\n     * remove the last data line\r\n     */\r\n    popDataLine() {\r\n        this.linesData.pop();\r\n    }\r\n    /**\r\n     * remove all the lines\r\n     */\r\n    removeAllLines() {\r\n        this._linesData = [];\r\n        this._linesAux = [];\r\n        this._thickLines = [];\r\n        this._surfaces = [];\r\n    }\r\n    /**\r\n     * remove all data lines\r\n     */\r\n    removeDataLines() {\r\n        this._linesData = [];\r\n    }\r\n    /**\r\n     * remove all auxiliary lines\r\n     */\r\n    removeAuxLines() {\r\n        this._linesAux = [];\r\n    }\r\n    /**\r\n     * Change the WbGL viewport\r\n     * @param a\r\n     * @param b\r\n     * @param c\r\n     * @param d\r\n     */\r\n    viewport(a, b, c, d) {\r\n        this.webgl.viewport(a, b, c, d);\r\n    }\r\n    log(str) {\r\n        if (this.debug) {\r\n            console.log(\"[webgl-plot]:\" + str);\r\n        }\r\n    }\r\n}\n\nexport { ColorRGBA, WebglLine, WebglPlot, WebglPolar, WebglSquare, WebglStep, WebglThickLine };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}