{"ast":null,"code":"import React from 'react';\nimport { notifyManager } from '../core/notifyManager';\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary';\nimport { useQueryClient } from './QueryClientProvider';\nimport { shouldThrowError } from './utils';\nexport function useBaseQuery(options, Observer) {\n  var mountedRef = React.useRef(false);\n\n  var _React$useState = React.useState(0),\n      forceUpdate = _React$useState[1];\n\n  var queryClient = useQueryClient();\n  var errorResetBoundary = useQueryErrorResetBoundary();\n  var defaultedOptions = queryClient.defaultQueryObserverOptions(options); // Make sure results are optimistically set in fetching state before subscribing or updating options\n\n  defaultedOptions.optimisticResults = true; // Include callbacks in batch renders\n\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(defaultedOptions.onError);\n  }\n\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(defaultedOptions.onSuccess);\n  }\n\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(defaultedOptions.onSettled);\n  }\n\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly mounting after suspending\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000;\n    } // Set cache time to 1 if the option has been set to 0\n    // when using suspense to prevent infinite loop of fetches\n\n\n    if (defaultedOptions.cacheTime === 0) {\n      defaultedOptions.cacheTime = 1;\n    }\n  }\n\n  if (defaultedOptions.suspense || defaultedOptions.useErrorBoundary) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      defaultedOptions.retryOnMount = false;\n    }\n  }\n\n  var _React$useState2 = React.useState(function () {\n    return new Observer(queryClient, defaultedOptions);\n  }),\n      observer = _React$useState2[0];\n\n  var result = observer.getOptimisticResult(defaultedOptions);\n  React.useEffect(function () {\n    mountedRef.current = true;\n    errorResetBoundary.clearReset();\n    var unsubscribe = observer.subscribe(notifyManager.batchCalls(function () {\n      if (mountedRef.current) {\n        forceUpdate(function (x) {\n          return x + 1;\n        });\n      }\n    })); // Update result to make sure we did not miss any query updates\n    // between creating the observer and subscribing to it.\n\n    observer.updateResult();\n    return function () {\n      mountedRef.current = false;\n      unsubscribe();\n    };\n  }, [errorResetBoundary, observer]);\n  React.useEffect(function () {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setOptions(defaultedOptions, {\n      listeners: false\n    });\n  }, [defaultedOptions, observer]); // Handle suspense\n\n  if (defaultedOptions.suspense && result.isLoading) {\n    throw observer.fetchOptimistic(defaultedOptions).then(function (_ref) {\n      var data = _ref.data;\n      defaultedOptions.onSuccess == null ? void 0 : defaultedOptions.onSuccess(data);\n      defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(data, null);\n    }).catch(function (error) {\n      errorResetBoundary.clearReset();\n      defaultedOptions.onError == null ? void 0 : defaultedOptions.onError(error);\n      defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(undefined, error);\n    });\n  } // Handle error boundary\n\n\n  if (result.isError && !errorResetBoundary.isReset() && !result.isFetching && shouldThrowError(defaultedOptions.suspense, defaultedOptions.useErrorBoundary, [result.error, observer.getCurrentQuery()])) {\n    throw result.error;\n  } // Handle result property usage tracking\n\n\n  if (defaultedOptions.notifyOnChangeProps === 'tracked') {\n    result = observer.trackResult(result, defaultedOptions);\n  }\n\n  return result;\n}","map":{"version":3,"names":["React","notifyManager","useQueryErrorResetBoundary","useQueryClient","shouldThrowError","useBaseQuery","options","Observer","mountedRef","useRef","_React$useState","useState","forceUpdate","queryClient","errorResetBoundary","defaultedOptions","defaultQueryObserverOptions","optimisticResults","onError","batchCalls","onSuccess","onSettled","suspense","staleTime","cacheTime","useErrorBoundary","isReset","retryOnMount","_React$useState2","observer","result","getOptimisticResult","useEffect","current","clearReset","unsubscribe","subscribe","x","updateResult","setOptions","listeners","isLoading","fetchOptimistic","then","_ref","data","catch","error","undefined","isError","isFetching","getCurrentQuery","notifyOnChangeProps","trackResult"],"sources":["/home/honza/node_modules/react-query/es/react/useBaseQuery.js"],"sourcesContent":["import React from 'react';\nimport { notifyManager } from '../core/notifyManager';\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary';\nimport { useQueryClient } from './QueryClientProvider';\nimport { shouldThrowError } from './utils';\nexport function useBaseQuery(options, Observer) {\n  var mountedRef = React.useRef(false);\n\n  var _React$useState = React.useState(0),\n      forceUpdate = _React$useState[1];\n\n  var queryClient = useQueryClient();\n  var errorResetBoundary = useQueryErrorResetBoundary();\n  var defaultedOptions = queryClient.defaultQueryObserverOptions(options); // Make sure results are optimistically set in fetching state before subscribing or updating options\n\n  defaultedOptions.optimisticResults = true; // Include callbacks in batch renders\n\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(defaultedOptions.onError);\n  }\n\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(defaultedOptions.onSuccess);\n  }\n\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(defaultedOptions.onSettled);\n  }\n\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly mounting after suspending\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000;\n    } // Set cache time to 1 if the option has been set to 0\n    // when using suspense to prevent infinite loop of fetches\n\n\n    if (defaultedOptions.cacheTime === 0) {\n      defaultedOptions.cacheTime = 1;\n    }\n  }\n\n  if (defaultedOptions.suspense || defaultedOptions.useErrorBoundary) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      defaultedOptions.retryOnMount = false;\n    }\n  }\n\n  var _React$useState2 = React.useState(function () {\n    return new Observer(queryClient, defaultedOptions);\n  }),\n      observer = _React$useState2[0];\n\n  var result = observer.getOptimisticResult(defaultedOptions);\n  React.useEffect(function () {\n    mountedRef.current = true;\n    errorResetBoundary.clearReset();\n    var unsubscribe = observer.subscribe(notifyManager.batchCalls(function () {\n      if (mountedRef.current) {\n        forceUpdate(function (x) {\n          return x + 1;\n        });\n      }\n    })); // Update result to make sure we did not miss any query updates\n    // between creating the observer and subscribing to it.\n\n    observer.updateResult();\n    return function () {\n      mountedRef.current = false;\n      unsubscribe();\n    };\n  }, [errorResetBoundary, observer]);\n  React.useEffect(function () {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setOptions(defaultedOptions, {\n      listeners: false\n    });\n  }, [defaultedOptions, observer]); // Handle suspense\n\n  if (defaultedOptions.suspense && result.isLoading) {\n    throw observer.fetchOptimistic(defaultedOptions).then(function (_ref) {\n      var data = _ref.data;\n      defaultedOptions.onSuccess == null ? void 0 : defaultedOptions.onSuccess(data);\n      defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(data, null);\n    }).catch(function (error) {\n      errorResetBoundary.clearReset();\n      defaultedOptions.onError == null ? void 0 : defaultedOptions.onError(error);\n      defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(undefined, error);\n    });\n  } // Handle error boundary\n\n\n  if (result.isError && !errorResetBoundary.isReset() && !result.isFetching && shouldThrowError(defaultedOptions.suspense, defaultedOptions.useErrorBoundary, [result.error, observer.getCurrentQuery()])) {\n    throw result.error;\n  } // Handle result property usage tracking\n\n\n  if (defaultedOptions.notifyOnChangeProps === 'tracked') {\n    result = observer.trackResult(result, defaultedOptions);\n  }\n\n  return result;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}